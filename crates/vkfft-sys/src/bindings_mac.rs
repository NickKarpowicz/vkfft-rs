/* automatically generated by rust-bindgen 0.69.4 */

pub type VkFlags = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkBuffer_T {
  _unused: [u8; 0],
}
pub type VkBuffer = *mut VkBuffer_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDevice_T {
  _unused: [u8; 0],
}
pub type VkPhysicalDevice = *mut VkPhysicalDevice_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDevice_T {
  _unused: [u8; 0],
}
pub type VkDevice = *mut VkDevice_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkQueue_T {
  _unused: [u8; 0],
}
pub type VkQueue = *mut VkQueue_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkCommandBuffer_T {
  _unused: [u8; 0],
}
pub type VkCommandBuffer = *mut VkCommandBuffer_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkFence_T {
  _unused: [u8; 0],
}
pub type VkFence = *mut VkFence_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDeviceMemory_T {
  _unused: [u8; 0],
}
pub type VkDeviceMemory = *mut VkDeviceMemory_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPipelineCache_T {
  _unused: [u8; 0],
}
pub type VkPipelineCache = *mut VkPipelineCache_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPipelineLayout_T {
  _unused: [u8; 0],
}
pub type VkPipelineLayout = *mut VkPipelineLayout_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPipeline_T {
  _unused: [u8; 0],
}
pub type VkPipeline = *mut VkPipeline_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDescriptorSetLayout_T {
  _unused: [u8; 0],
}
pub type VkDescriptorSetLayout = *mut VkDescriptorSetLayout_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDescriptorSet_T {
  _unused: [u8; 0],
}
pub type VkDescriptorSet = *mut VkDescriptorSet_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDescriptorPool_T {
  _unused: [u8; 0],
}
pub type VkDescriptorPool = *mut VkDescriptorPool_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkCommandPool_T {
  _unused: [u8; 0],
}
pub type VkCommandPool = *mut VkCommandPool_T;
pub const VkStructureType_VK_STRUCTURE_TYPE_APPLICATION_INFO: VkStructureType = 0;
pub const VkStructureType_VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO: VkStructureType = 1;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO: VkStructureType = 2;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO: VkStructureType = 3;
pub const VkStructureType_VK_STRUCTURE_TYPE_SUBMIT_INFO: VkStructureType = 4;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO: VkStructureType = 5;
pub const VkStructureType_VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE: VkStructureType = 6;
pub const VkStructureType_VK_STRUCTURE_TYPE_BIND_SPARSE_INFO: VkStructureType = 7;
pub const VkStructureType_VK_STRUCTURE_TYPE_FENCE_CREATE_INFO: VkStructureType = 8;
pub const VkStructureType_VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO: VkStructureType = 9;
pub const VkStructureType_VK_STRUCTURE_TYPE_EVENT_CREATE_INFO: VkStructureType = 10;
pub const VkStructureType_VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO: VkStructureType = 11;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO: VkStructureType = 12;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO: VkStructureType = 13;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO: VkStructureType = 14;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO: VkStructureType = 15;
pub const VkStructureType_VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO: VkStructureType = 16;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO: VkStructureType = 17;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO: VkStructureType = 18;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO:
  VkStructureType = 19;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO:
  VkStructureType = 20;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO:
  VkStructureType = 21;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO: VkStructureType =
  22;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO:
  VkStructureType = 23;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO:
  VkStructureType = 24;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO:
  VkStructureType = 25;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO:
  VkStructureType = 26;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO: VkStructureType =
  27;
pub const VkStructureType_VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO: VkStructureType = 28;
pub const VkStructureType_VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO: VkStructureType = 29;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO: VkStructureType = 30;
pub const VkStructureType_VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO: VkStructureType = 31;
pub const VkStructureType_VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO: VkStructureType = 32;
pub const VkStructureType_VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO: VkStructureType = 33;
pub const VkStructureType_VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO: VkStructureType = 34;
pub const VkStructureType_VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET: VkStructureType = 35;
pub const VkStructureType_VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET: VkStructureType = 36;
pub const VkStructureType_VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO: VkStructureType = 37;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO: VkStructureType = 38;
pub const VkStructureType_VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO: VkStructureType = 39;
pub const VkStructureType_VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO: VkStructureType = 40;
pub const VkStructureType_VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO: VkStructureType = 41;
pub const VkStructureType_VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO: VkStructureType = 42;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO: VkStructureType = 43;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER: VkStructureType = 44;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER: VkStructureType = 45;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_BARRIER: VkStructureType = 46;
pub const VkStructureType_VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO: VkStructureType = 47;
pub const VkStructureType_VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO: VkStructureType = 48;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES: VkStructureType =
  1000094000;
pub const VkStructureType_VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO: VkStructureType = 1000157000;
pub const VkStructureType_VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO: VkStructureType = 1000157001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES:
  VkStructureType = 1000083000;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS: VkStructureType =
  1000127000;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO: VkStructureType =
  1000127001;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO: VkStructureType =
  1000060000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO: VkStructureType =
  1000060003;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO:
  VkStructureType = 1000060004;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO: VkStructureType = 1000060005;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO: VkStructureType =
  1000060006;
pub const VkStructureType_VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO: VkStructureType =
  1000060013;
pub const VkStructureType_VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO: VkStructureType =
  1000060014;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES: VkStructureType =
  1000070000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO: VkStructureType =
  1000070001;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2: VkStructureType =
  1000146000;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2: VkStructureType =
  1000146001;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2:
  VkStructureType = 1000146002;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2: VkStructureType = 1000146003;
pub const VkStructureType_VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2: VkStructureType =
  1000146004;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2: VkStructureType =
  1000059000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2: VkStructureType =
  1000059001;
pub const VkStructureType_VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2: VkStructureType = 1000059002;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2: VkStructureType = 1000059003;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2: VkStructureType =
  1000059004;
pub const VkStructureType_VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2: VkStructureType = 1000059005;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2: VkStructureType =
  1000059006;
pub const VkStructureType_VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2: VkStructureType =
  1000059007;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2:
  VkStructureType = 1000059008;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES:
  VkStructureType = 1000117000;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO:
  VkStructureType = 1000117001;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO: VkStructureType =
  1000117002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO : VkStructureType = 1000117003 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO: VkStructureType =
  1000053000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES: VkStructureType =
  1000053001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES: VkStructureType =
  1000053002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES:
  VkStructureType = 1000120000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO: VkStructureType = 1000145000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES:
  VkStructureType = 1000145001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES:
  VkStructureType = 1000145002;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2: VkStructureType = 1000145003;
pub const VkStructureType_VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO: VkStructureType =
  1000156000;
pub const VkStructureType_VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO: VkStructureType =
  1000156001;
pub const VkStructureType_VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO: VkStructureType =
  1000156002;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO: VkStructureType =
  1000156003;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES:
  VkStructureType = 1000156004;
pub const VkStructureType_VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES:
  VkStructureType = 1000156005;
pub const VkStructureType_VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO:
  VkStructureType = 1000085000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO:
  VkStructureType = 1000071000;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES: VkStructureType =
  1000071001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO: VkStructureType =
  1000071002;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES: VkStructureType =
  1000071003;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES: VkStructureType =
  1000071004;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO: VkStructureType =
  1000072000;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO: VkStructureType =
  1000072001;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO: VkStructureType =
  1000072002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO: VkStructureType =
  1000112000;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES: VkStructureType = 1000112001;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO: VkStructureType = 1000113000;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO: VkStructureType =
  1000077000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO:
  VkStructureType = 1000076000;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES: VkStructureType =
  1000076001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES:
  VkStructureType = 1000168000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT: VkStructureType =
  1000168001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES:
  VkStructureType = 1000063000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES: VkStructureType =
  49;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES: VkStructureType =
  50;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES: VkStructureType =
  51;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES: VkStructureType =
  52;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO: VkStructureType =
  1000147000;
pub const VkStructureType_VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2: VkStructureType = 1000109000;
pub const VkStructureType_VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2: VkStructureType = 1000109001;
pub const VkStructureType_VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2: VkStructureType = 1000109002;
pub const VkStructureType_VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2: VkStructureType = 1000109003;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2: VkStructureType = 1000109004;
pub const VkStructureType_VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO: VkStructureType = 1000109005;
pub const VkStructureType_VK_STRUCTURE_TYPE_SUBPASS_END_INFO: VkStructureType = 1000109006;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES: VkStructureType =
  1000177000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES: VkStructureType =
  1000196000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES:
  VkStructureType = 1000180000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES:
  VkStructureType = 1000082000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES:
  VkStructureType = 1000197000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO:
  VkStructureType = 1000161000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES:
  VkStructureType = 1000161001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES:
  VkStructureType = 1000161002;
pub const VkStructureType_VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO : VkStructureType = 1000161003 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT : VkStructureType = 1000161004 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES:
  VkStructureType = 1000199000;
pub const VkStructureType_VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE:
  VkStructureType = 1000199001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES:
  VkStructureType = 1000221000;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO: VkStructureType =
  1000246000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES:
  VkStructureType = 1000130000;
pub const VkStructureType_VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO: VkStructureType =
  1000130001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES:
  VkStructureType = 1000211000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES:
  VkStructureType = 1000108000;
pub const VkStructureType_VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO: VkStructureType =
  1000108001;
pub const VkStructureType_VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO: VkStructureType =
  1000108002;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO: VkStructureType =
  1000108003;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES : VkStructureType = 1000253000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES : VkStructureType = 1000175000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES : VkStructureType = 1000241000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT: VkStructureType =
  1000241001;
pub const VkStructureType_VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT: VkStructureType =
  1000241002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES:
  VkStructureType = 1000261000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES:
  VkStructureType = 1000207000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES:
  VkStructureType = 1000207001;
pub const VkStructureType_VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO: VkStructureType =
  1000207002;
pub const VkStructureType_VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO: VkStructureType =
  1000207003;
pub const VkStructureType_VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO: VkStructureType = 1000207004;
pub const VkStructureType_VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO: VkStructureType = 1000207005;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES:
  VkStructureType = 1000257000;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO: VkStructureType =
  1000244001;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO:
  VkStructureType = 1000257002;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO:
  VkStructureType = 1000257003;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO:
  VkStructureType = 1000257004;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_FEATURES: VkStructureType =
  53;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_PROPERTIES: VkStructureType =
  54;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO:
  VkStructureType = 1000192000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES:
  VkStructureType = 1000215000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES: VkStructureType =
  1000245000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES : VkStructureType = 1000276000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES: VkStructureType =
  1000295000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO: VkStructureType =
  1000295001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO: VkStructureType =
  1000295002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES : VkStructureType = 1000297000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_BARRIER_2: VkStructureType = 1000314000;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2: VkStructureType = 1000314001;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2: VkStructureType = 1000314002;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEPENDENCY_INFO: VkStructureType = 1000314003;
pub const VkStructureType_VK_STRUCTURE_TYPE_SUBMIT_INFO_2: VkStructureType = 1000314004;
pub const VkStructureType_VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO: VkStructureType = 1000314005;
pub const VkStructureType_VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO: VkStructureType =
  1000314006;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES:
  VkStructureType = 1000314007;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES : VkStructureType = 1000325000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES:
  VkStructureType = 1000335000;
pub const VkStructureType_VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2: VkStructureType = 1000337000;
pub const VkStructureType_VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2: VkStructureType = 1000337001;
pub const VkStructureType_VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2: VkStructureType =
  1000337002;
pub const VkStructureType_VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2: VkStructureType =
  1000337003;
pub const VkStructureType_VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2: VkStructureType = 1000337004;
pub const VkStructureType_VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2: VkStructureType = 1000337005;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_COPY_2: VkStructureType = 1000337006;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_COPY_2: VkStructureType = 1000337007;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_BLIT_2: VkStructureType = 1000337008;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2: VkStructureType = 1000337009;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2: VkStructureType = 1000337010;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES:
  VkStructureType = 1000225000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO : VkStructureType = 1000225001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES:
  VkStructureType = 1000225002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES:
  VkStructureType = 1000138000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES:
  VkStructureType = 1000138001;
pub const VkStructureType_VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK:
  VkStructureType = 1000138002;
pub const VkStructureType_VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO:
  VkStructureType = 1000138003;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES : VkStructureType = 1000066000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDERING_INFO: VkStructureType = 1000044000;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO: VkStructureType = 1000044001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO: VkStructureType =
  1000044002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES:
  VkStructureType = 1000044003;
pub const VkStructureType_VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO:
  VkStructureType = 1000044004;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES:
  VkStructureType = 1000280000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES : VkStructureType = 1000280001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES:
  VkStructureType = 1000281001;
pub const VkStructureType_VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3: VkStructureType = 1000360000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES:
  VkStructureType = 1000413000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES:
  VkStructureType = 1000413001;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS: VkStructureType =
  1000413002;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS: VkStructureType =
  1000413003;
pub const VkStructureType_VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR: VkStructureType = 1000001000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PRESENT_INFO_KHR: VkStructureType = 1000001001;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR: VkStructureType =
  1000060007;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR: VkStructureType =
  1000060008;
pub const VkStructureType_VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR: VkStructureType =
  1000060009;
pub const VkStructureType_VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR: VkStructureType =
  1000060010;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR: VkStructureType =
  1000060011;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR:
  VkStructureType = 1000060012;
pub const VkStructureType_VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR: VkStructureType =
  1000002000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR: VkStructureType =
  1000002001;
pub const VkStructureType_VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR: VkStructureType = 1000003000;
pub const VkStructureType_VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR: VkStructureType =
  1000004000;
pub const VkStructureType_VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR: VkStructureType =
  1000005000;
pub const VkStructureType_VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR: VkStructureType =
  1000006000;
pub const VkStructureType_VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR: VkStructureType =
  1000008000;
pub const VkStructureType_VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR: VkStructureType =
  1000009000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT: VkStructureType =
  1000011000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD:
  VkStructureType = 1000018000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT: VkStructureType =
  1000022000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT: VkStructureType =
  1000022001;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT: VkStructureType =
  1000022002;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_PROFILE_INFO_KHR: VkStructureType = 1000023000;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_CAPABILITIES_KHR: VkStructureType = 1000023001;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_PICTURE_RESOURCE_INFO_KHR: VkStructureType =
  1000023002;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_SESSION_MEMORY_REQUIREMENTS_KHR: VkStructureType =
  1000023003;
pub const VkStructureType_VK_STRUCTURE_TYPE_BIND_VIDEO_SESSION_MEMORY_INFO_KHR: VkStructureType =
  1000023004;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_SESSION_CREATE_INFO_KHR: VkStructureType =
  1000023005;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_CREATE_INFO_KHR:
  VkStructureType = 1000023006;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_UPDATE_INFO_KHR:
  VkStructureType = 1000023007;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_BEGIN_CODING_INFO_KHR: VkStructureType =
  1000023008;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_END_CODING_INFO_KHR: VkStructureType = 1000023009;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_CODING_CONTROL_INFO_KHR: VkStructureType =
  1000023010;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_REFERENCE_SLOT_INFO_KHR: VkStructureType =
  1000023011;
pub const VkStructureType_VK_STRUCTURE_TYPE_QUEUE_FAMILY_VIDEO_PROPERTIES_KHR: VkStructureType =
  1000023012;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_PROFILE_LIST_INFO_KHR: VkStructureType =
  1000023013;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_FORMAT_INFO_KHR: VkStructureType =
  1000023014;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_FORMAT_PROPERTIES_KHR: VkStructureType =
  1000023015;
pub const VkStructureType_VK_STRUCTURE_TYPE_QUEUE_FAMILY_QUERY_RESULT_STATUS_PROPERTIES_KHR:
  VkStructureType = 1000023016;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_DECODE_INFO_KHR: VkStructureType = 1000024000;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_DECODE_CAPABILITIES_KHR: VkStructureType =
  1000024001;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_DECODE_USAGE_INFO_KHR: VkStructureType =
  1000024002;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV:
  VkStructureType = 1000026000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV:
  VkStructureType = 1000026001;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV:
  VkStructureType = 1000026002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT:
  VkStructureType = 1000028000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT:
  VkStructureType = 1000028001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT:
  VkStructureType = 1000028002;
pub const VkStructureType_VK_STRUCTURE_TYPE_CU_MODULE_CREATE_INFO_NVX: VkStructureType = 1000029000;
pub const VkStructureType_VK_STRUCTURE_TYPE_CU_FUNCTION_CREATE_INFO_NVX: VkStructureType =
  1000029001;
pub const VkStructureType_VK_STRUCTURE_TYPE_CU_LAUNCH_INFO_NVX: VkStructureType = 1000029002;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX: VkStructureType =
  1000030000;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX: VkStructureType =
  1000030001;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_CAPABILITIES_KHR: VkStructureType =
  1000038000;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_CREATE_INFO_KHR:
  VkStructureType = 1000038001;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_ADD_INFO_KHR:
  VkStructureType = 1000038002;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_PICTURE_INFO_KHR: VkStructureType =
  1000038003;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_DPB_SLOT_INFO_KHR: VkStructureType =
  1000038004;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_NALU_SLICE_INFO_KHR: VkStructureType =
  1000038005;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_GOP_REMAINING_FRAME_INFO_KHR:
  VkStructureType = 1000038006;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_PROFILE_INFO_KHR: VkStructureType =
  1000038007;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_RATE_CONTROL_INFO_KHR:
  VkStructureType = 1000038008;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_RATE_CONTROL_LAYER_INFO_KHR:
  VkStructureType = 1000038009;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_CREATE_INFO_KHR:
  VkStructureType = 1000038010;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_QUALITY_LEVEL_PROPERTIES_KHR:
  VkStructureType = 1000038011;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_GET_INFO_KHR:
  VkStructureType = 1000038012;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_FEEDBACK_INFO_KHR : VkStructureType = 1000038013 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_CAPABILITIES_KHR: VkStructureType =
  1000039000;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_CREATE_INFO_KHR:
  VkStructureType = 1000039001;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_ADD_INFO_KHR:
  VkStructureType = 1000039002;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_PICTURE_INFO_KHR: VkStructureType =
  1000039003;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_DPB_SLOT_INFO_KHR: VkStructureType =
  1000039004;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_NALU_SLICE_SEGMENT_INFO_KHR:
  VkStructureType = 1000039005;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_GOP_REMAINING_FRAME_INFO_KHR:
  VkStructureType = 1000039006;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_PROFILE_INFO_KHR: VkStructureType =
  1000039007;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_RATE_CONTROL_INFO_KHR:
  VkStructureType = 1000039009;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_RATE_CONTROL_LAYER_INFO_KHR:
  VkStructureType = 1000039010;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_CREATE_INFO_KHR:
  VkStructureType = 1000039011;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_QUALITY_LEVEL_PROPERTIES_KHR:
  VkStructureType = 1000039012;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_GET_INFO_KHR:
  VkStructureType = 1000039013;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_FEEDBACK_INFO_KHR : VkStructureType = 1000039014 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_CAPABILITIES_KHR: VkStructureType =
  1000040000;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PICTURE_INFO_KHR: VkStructureType =
  1000040001;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PROFILE_INFO_KHR: VkStructureType =
  1000040003;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_CREATE_INFO_KHR:
  VkStructureType = 1000040004;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_ADD_INFO_KHR:
  VkStructureType = 1000040005;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_DPB_SLOT_INFO_KHR: VkStructureType =
  1000040006;
pub const VkStructureType_VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD:
  VkStructureType = 1000041000;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR:
  VkStructureType = 1000044006;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_INFO_EXT:
  VkStructureType = 1000044007;
pub const VkStructureType_VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_AMD: VkStructureType =
  1000044008;
pub const VkStructureType_VK_STRUCTURE_TYPE_MULTIVIEW_PER_VIEW_ATTRIBUTES_INFO_NVX:
  VkStructureType = 1000044009;
pub const VkStructureType_VK_STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP:
  VkStructureType = 1000049000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV:
  VkStructureType = 1000050000;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV: VkStructureType =
  1000056000;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV: VkStructureType =
  1000056001;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV: VkStructureType =
  1000057000;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV: VkStructureType =
  1000057001;
pub const VkStructureType_VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV:
  VkStructureType = 1000058000;
pub const VkStructureType_VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT: VkStructureType = 1000061000;
pub const VkStructureType_VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN: VkStructureType = 1000062000;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT: VkStructureType =
  1000067000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT:
  VkStructureType = 1000067001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_ROBUSTNESS_CREATE_INFO_EXT: VkStructureType =
  1000068000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_FEATURES_EXT:
  VkStructureType = 1000068001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_PROPERTIES_EXT:
  VkStructureType = 1000068002;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR: VkStructureType =
  1000073000;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR: VkStructureType =
  1000073001;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR: VkStructureType =
  1000073002;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR: VkStructureType =
  1000073003;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR: VkStructureType = 1000074000;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR: VkStructureType = 1000074001;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR: VkStructureType = 1000074002;
pub const VkStructureType_VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR:
  VkStructureType = 1000075000;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR:
  VkStructureType = 1000078000;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR:
  VkStructureType = 1000078001;
pub const VkStructureType_VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR: VkStructureType =
  1000078002;
pub const VkStructureType_VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR: VkStructureType =
  1000078003;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR: VkStructureType =
  1000079000;
pub const VkStructureType_VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR: VkStructureType = 1000079001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR:
  VkStructureType = 1000080000;
pub const VkStructureType_VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT : VkStructureType = 1000081000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT:
  VkStructureType = 1000081001;
pub const VkStructureType_VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT: VkStructureType =
  1000081002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR: VkStructureType = 1000084000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV:
  VkStructureType = 1000087000;
pub const VkStructureType_VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT: VkStructureType =
  1000090000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT: VkStructureType = 1000091000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT: VkStructureType = 1000091001;
pub const VkStructureType_VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT: VkStructureType = 1000091002;
pub const VkStructureType_VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT: VkStructureType =
  1000091003;
pub const VkStructureType_VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE: VkStructureType = 1000092000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX : VkStructureType = 1000097000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV:
  VkStructureType = 1000098000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT:
  VkStructureType = 1000099000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT:
  VkStructureType = 1000099001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT : VkStructureType = 1000101000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT : VkStructureType = 1000101001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT:
  VkStructureType = 1000102000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT : VkStructureType = 1000102001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_HDR_METADATA_EXT: VkStructureType = 1000105000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RELAXED_LINE_RASTERIZATION_FEATURES_IMG : VkStructureType = 1000110000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR:
  VkStructureType = 1000111000;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR: VkStructureType =
  1000114000;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR: VkStructureType =
  1000114001;
pub const VkStructureType_VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR: VkStructureType =
  1000114002;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR: VkStructureType = 1000115000;
pub const VkStructureType_VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR: VkStructureType = 1000115001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR:
  VkStructureType = 1000116000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR:
  VkStructureType = 1000116001;
pub const VkStructureType_VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR:
  VkStructureType = 1000116002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR: VkStructureType =
  1000116003;
pub const VkStructureType_VK_STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR: VkStructureType =
  1000116004;
pub const VkStructureType_VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR: VkStructureType = 1000116005;
pub const VkStructureType_VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR: VkStructureType =
  1000116006;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR: VkStructureType =
  1000119000;
pub const VkStructureType_VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR: VkStructureType =
  1000119001;
pub const VkStructureType_VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR: VkStructureType = 1000119002;
pub const VkStructureType_VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR: VkStructureType = 1000121000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR: VkStructureType =
  1000121001;
pub const VkStructureType_VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR: VkStructureType =
  1000121002;
pub const VkStructureType_VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR: VkStructureType = 1000121003;
pub const VkStructureType_VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR: VkStructureType =
  1000121004;
pub const VkStructureType_VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK: VkStructureType =
  1000122000;
pub const VkStructureType_VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK: VkStructureType =
  1000123000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT: VkStructureType =
  1000128000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT: VkStructureType =
  1000128001;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT: VkStructureType = 1000128002;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT:
  VkStructureType = 1000128003;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT: VkStructureType =
  1000128004;
pub const VkStructureType_VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID: VkStructureType =
  1000129000;
pub const VkStructureType_VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID:
  VkStructureType = 1000129001;
pub const VkStructureType_VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID:
  VkStructureType = 1000129002;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID:
  VkStructureType = 1000129003;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID:
  VkStructureType = 1000129004;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID: VkStructureType = 1000129005;
pub const VkStructureType_VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_2_ANDROID:
  VkStructureType = 1000129006;
pub const VkStructureType_VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT: VkStructureType = 1000143000;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT:
  VkStructureType = 1000143001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT:
  VkStructureType = 1000143002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT:
  VkStructureType = 1000143003;
pub const VkStructureType_VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT: VkStructureType =
  1000143004;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT : VkStructureType = 1000148000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT : VkStructureType = 1000148001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT:
  VkStructureType = 1000148002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV:
  VkStructureType = 1000149000;
pub const VkStructureType_VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR:
  VkStructureType = 1000150007;
pub const VkStructureType_VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR:
  VkStructureType = 1000150000;
pub const VkStructureType_VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR:
  VkStructureType = 1000150002;
pub const VkStructureType_VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR:
  VkStructureType = 1000150003;
pub const VkStructureType_VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR:
  VkStructureType = 1000150004;
pub const VkStructureType_VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR:
  VkStructureType = 1000150005;
pub const VkStructureType_VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR: VkStructureType =
  1000150006;
pub const VkStructureType_VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_INFO_KHR:
  VkStructureType = 1000150009;
pub const VkStructureType_VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR: VkStructureType =
  1000150010;
pub const VkStructureType_VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR:
  VkStructureType = 1000150011;
pub const VkStructureType_VK_STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR:
  VkStructureType = 1000150012;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR:
  VkStructureType = 1000150013;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_PROPERTIES_KHR : VkStructureType = 1000150014 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR:
  VkStructureType = 1000150017;
pub const VkStructureType_VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR:
  VkStructureType = 1000150020;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR:
  VkStructureType = 1000347000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_PROPERTIES_KHR:
  VkStructureType = 1000347001;
pub const VkStructureType_VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR: VkStructureType =
  1000150015;
pub const VkStructureType_VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR:
  VkStructureType = 1000150016;
pub const VkStructureType_VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR:
  VkStructureType = 1000150018;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR:
  VkStructureType = 1000348013;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV:
  VkStructureType = 1000152000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV:
  VkStructureType = 1000154000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV:
  VkStructureType = 1000154001;
pub const VkStructureType_VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT:
  VkStructureType = 1000158000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT:
  VkStructureType = 1000158002;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT:
  VkStructureType = 1000158003;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT:
  VkStructureType = 1000158004;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT:
  VkStructureType = 1000158005;
pub const VkStructureType_VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_2_EXT:
  VkStructureType = 1000158006;
pub const VkStructureType_VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT: VkStructureType =
  1000160000;
pub const VkStructureType_VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT:
  VkStructureType = 1000160001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV : VkStructureType = 1000164000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV:
  VkStructureType = 1000164001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV:
  VkStructureType = 1000164002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV : VkStructureType = 1000164005 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV: VkStructureType =
  1000165000;
pub const VkStructureType_VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV: VkStructureType =
  1000165001;
pub const VkStructureType_VK_STRUCTURE_TYPE_GEOMETRY_NV: VkStructureType = 1000165003;
pub const VkStructureType_VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV: VkStructureType = 1000165004;
pub const VkStructureType_VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV: VkStructureType = 1000165005;
pub const VkStructureType_VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV:
  VkStructureType = 1000165006;
pub const VkStructureType_VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV:
  VkStructureType = 1000165007;
pub const VkStructureType_VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV:
  VkStructureType = 1000165008;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV:
  VkStructureType = 1000165009;
pub const VkStructureType_VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV:
  VkStructureType = 1000165011;
pub const VkStructureType_VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV: VkStructureType =
  1000165012;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV : VkStructureType = 1000166000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV : VkStructureType = 1000166001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT:
  VkStructureType = 1000170000;
pub const VkStructureType_VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT:
  VkStructureType = 1000170001;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT: VkStructureType =
  1000178000;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT: VkStructureType =
  1000178001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT:
  VkStructureType = 1000178002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR:
  VkStructureType = 1000181000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD:
  VkStructureType = 1000183000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD:
  VkStructureType = 1000185000;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_CAPABILITIES_KHR: VkStructureType =
  1000187000;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_CREATE_INFO_KHR:
  VkStructureType = 1000187001;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_ADD_INFO_KHR:
  VkStructureType = 1000187002;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PROFILE_INFO_KHR: VkStructureType =
  1000187003;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PICTURE_INFO_KHR: VkStructureType =
  1000187004;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_DPB_SLOT_INFO_KHR: VkStructureType =
  1000187005;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_KHR:
  VkStructureType = 1000174000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_KHR:
  VkStructureType = 1000388000;
pub const VkStructureType_VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_KHR:
  VkStructureType = 1000388001;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD:
  VkStructureType = 1000189000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT : VkStructureType = 1000190000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP: VkStructureType = 1000191000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV : VkStructureType = 1000201000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV:
  VkStructureType = 1000202000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV:
  VkStructureType = 1000202001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV:
  VkStructureType = 1000204000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV : VkStructureType = 1000205000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV:
  VkStructureType = 1000205002;
pub const VkStructureType_VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV: VkStructureType = 1000206000;
pub const VkStructureType_VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV: VkStructureType =
  1000206001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL : VkStructureType = 1000209000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL:
  VkStructureType = 1000210000;
pub const VkStructureType_VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL: VkStructureType =
  1000210001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL: VkStructureType =
  1000210002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL: VkStructureType =
  1000210003;
pub const VkStructureType_VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL: VkStructureType =
  1000210004;
pub const VkStructureType_VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL:
  VkStructureType = 1000210005;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT:
  VkStructureType = 1000212000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD:
  VkStructureType = 1000213000;
pub const VkStructureType_VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD:
  VkStructureType = 1000213001;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA: VkStructureType =
  1000214000;
pub const VkStructureType_VK_STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT: VkStructureType =
  1000217000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT:
  VkStructureType = 1000218000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT:
  VkStructureType = 1000218001;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT:
  VkStructureType = 1000218002;
pub const VkStructureType_VK_STRUCTURE_TYPE_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR:
  VkStructureType = 1000226000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR:
  VkStructureType = 1000226001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_PROPERTIES_KHR:
  VkStructureType = 1000226002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR:
  VkStructureType = 1000226003;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_KHR:
  VkStructureType = 1000226004;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD:
  VkStructureType = 1000227000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD:
  VkStructureType = 1000229000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_LOCAL_READ_FEATURES_KHR : VkStructureType = 1000232000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_LOCATION_INFO_KHR:
  VkStructureType = 1000232001;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDERING_INPUT_ATTACHMENT_INDEX_INFO_KHR:
  VkStructureType = 1000232002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT : VkStructureType = 1000234000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_QUAD_CONTROL_FEATURES_KHR:
  VkStructureType = 1000235000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT:
  VkStructureType = 1000237000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT:
  VkStructureType = 1000238000;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT: VkStructureType =
  1000238001;
pub const VkStructureType_VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR: VkStructureType =
  1000239000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV : VkStructureType = 1000240000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT:
  VkStructureType = 1000244000;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT: VkStructureType =
  1000244002;
pub const VkStructureType_VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT: VkStructureType = 1000247000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_WAIT_FEATURES_KHR:
  VkStructureType = 1000248000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV:
  VkStructureType = 1000249000;
pub const VkStructureType_VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV: VkStructureType =
  1000249001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV:
  VkStructureType = 1000249002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV:
  VkStructureType = 1000250000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV:
  VkStructureType = 1000250001;
pub const VkStructureType_VK_STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV:
  VkStructureType = 1000250002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT : VkStructureType = 1000251000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT:
  VkStructureType = 1000252000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_FEATURES_EXT:
  VkStructureType = 1000254000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_PROVOKING_VERTEX_STATE_CREATE_INFO_EXT : VkStructureType = 1000254001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_PROPERTIES_EXT:
  VkStructureType = 1000254002;
pub const VkStructureType_VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT:
  VkStructureType = 1000255000;
pub const VkStructureType_VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT:
  VkStructureType = 1000255002;
pub const VkStructureType_VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT:
  VkStructureType = 1000255001;
pub const VkStructureType_VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT: VkStructureType =
  1000256000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT:
  VkStructureType = 1000260000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT:
  VkStructureType = 1000267000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR : VkStructureType = 1000269000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR: VkStructureType = 1000269001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR: VkStructureType =
  1000269002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR: VkStructureType =
  1000269003;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR: VkStructureType =
  1000269004;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR:
  VkStructureType = 1000269005;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_FEATURES_EXT:
  VkStructureType = 1000270000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_PROPERTIES_EXT:
  VkStructureType = 1000270001;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_TO_IMAGE_COPY_EXT: VkStructureType = 1000270002;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_TO_MEMORY_COPY_EXT: VkStructureType = 1000270003;
pub const VkStructureType_VK_STRUCTURE_TYPE_COPY_IMAGE_TO_MEMORY_INFO_EXT: VkStructureType =
  1000270004;
pub const VkStructureType_VK_STRUCTURE_TYPE_COPY_MEMORY_TO_IMAGE_INFO_EXT: VkStructureType =
  1000270005;
pub const VkStructureType_VK_STRUCTURE_TYPE_HOST_IMAGE_LAYOUT_TRANSITION_INFO_EXT: VkStructureType =
  1000270006;
pub const VkStructureType_VK_STRUCTURE_TYPE_COPY_IMAGE_TO_IMAGE_INFO_EXT: VkStructureType =
  1000270007;
pub const VkStructureType_VK_STRUCTURE_TYPE_SUBRESOURCE_HOST_MEMCPY_SIZE_EXT: VkStructureType =
  1000270008;
pub const VkStructureType_VK_STRUCTURE_TYPE_HOST_IMAGE_COPY_DEVICE_PERFORMANCE_QUERY_EXT:
  VkStructureType = 1000270009;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_MAP_INFO_KHR: VkStructureType = 1000271000;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_UNMAP_INFO_KHR: VkStructureType = 1000271001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAP_MEMORY_PLACED_FEATURES_EXT:
  VkStructureType = 1000272000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAP_MEMORY_PLACED_PROPERTIES_EXT:
  VkStructureType = 1000272001;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_MAP_PLACED_INFO_EXT: VkStructureType =
  1000272002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_2_FEATURES_EXT:
  VkStructureType = 1000273000;
pub const VkStructureType_VK_STRUCTURE_TYPE_SURFACE_PRESENT_MODE_EXT: VkStructureType = 1000274000;
pub const VkStructureType_VK_STRUCTURE_TYPE_SURFACE_PRESENT_SCALING_CAPABILITIES_EXT:
  VkStructureType = 1000274001;
pub const VkStructureType_VK_STRUCTURE_TYPE_SURFACE_PRESENT_MODE_COMPATIBILITY_EXT:
  VkStructureType = 1000274002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SWAPCHAIN_MAINTENANCE_1_FEATURES_EXT:
  VkStructureType = 1000275000;
pub const VkStructureType_VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_FENCE_INFO_EXT: VkStructureType =
  1000275001;
pub const VkStructureType_VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_MODES_CREATE_INFO_EXT:
  VkStructureType = 1000275002;
pub const VkStructureType_VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_MODE_INFO_EXT: VkStructureType =
  1000275003;
pub const VkStructureType_VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_SCALING_CREATE_INFO_EXT:
  VkStructureType = 1000275004;
pub const VkStructureType_VK_STRUCTURE_TYPE_RELEASE_SWAPCHAIN_IMAGES_INFO_EXT: VkStructureType =
  1000275005;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV : VkStructureType = 1000277000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV: VkStructureType =
  1000277001;
pub const VkStructureType_VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV:
  VkStructureType = 1000277002;
pub const VkStructureType_VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV: VkStructureType =
  1000277003;
pub const VkStructureType_VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV:
  VkStructureType = 1000277004;
pub const VkStructureType_VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV: VkStructureType =
  1000277005;
pub const VkStructureType_VK_STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV:
  VkStructureType = 1000277006;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV : VkStructureType = 1000277007 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INHERITED_VIEWPORT_SCISSOR_FEATURES_NV : VkStructureType = 1000278000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_VIEWPORT_SCISSOR_INFO_NV:
  VkStructureType = 1000278001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT:
  VkStructureType = 1000281000;
pub const VkStructureType_VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM : VkStructureType = 1000282000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM: VkStructureType =
  1000282001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_BIAS_CONTROL_FEATURES_EXT:
  VkStructureType = 1000283000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEPTH_BIAS_INFO_EXT: VkStructureType = 1000283001;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEPTH_BIAS_REPRESENTATION_INFO_EXT: VkStructureType =
  1000283002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_EXT:
  VkStructureType = 1000284000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_DEVICE_MEMORY_REPORT_CREATE_INFO_EXT:
  VkStructureType = 1000284001;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_MEMORY_REPORT_CALLBACK_DATA_EXT:
  VkStructureType = 1000284002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT:
  VkStructureType = 1000286000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT:
  VkStructureType = 1000286001;
pub const VkStructureType_VK_STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT:
  VkStructureType = 1000287000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT:
  VkStructureType = 1000287001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT:
  VkStructureType = 1000287002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR: VkStructureType =
  1000290000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_BARRIER_FEATURES_NV:
  VkStructureType = 1000292000;
pub const VkStructureType_VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_PRESENT_BARRIER_NV:
  VkStructureType = 1000292001;
pub const VkStructureType_VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_BARRIER_CREATE_INFO_NV:
  VkStructureType = 1000292002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PRESENT_ID_KHR: VkStructureType = 1000294000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_ID_FEATURES_KHR:
  VkStructureType = 1000294001;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_INFO_KHR: VkStructureType = 1000299000;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_RATE_CONTROL_INFO_KHR: VkStructureType =
  1000299001;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_RATE_CONTROL_LAYER_INFO_KHR:
  VkStructureType = 1000299002;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_CAPABILITIES_KHR: VkStructureType =
  1000299003;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_USAGE_INFO_KHR: VkStructureType =
  1000299004;
pub const VkStructureType_VK_STRUCTURE_TYPE_QUERY_POOL_VIDEO_ENCODE_FEEDBACK_CREATE_INFO_KHR:
  VkStructureType = 1000299005;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_ENCODE_QUALITY_LEVEL_INFO_KHR:
  VkStructureType = 1000299006;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_QUALITY_LEVEL_PROPERTIES_KHR:
  VkStructureType = 1000299007;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_QUALITY_LEVEL_INFO_KHR: VkStructureType =
  1000299008;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_SESSION_PARAMETERS_GET_INFO_KHR:
  VkStructureType = 1000299009;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_SESSION_PARAMETERS_FEEDBACK_INFO_KHR:
  VkStructureType = 1000299010;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV:
  VkStructureType = 1000300000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV:
  VkStructureType = 1000300001;
pub const VkStructureType_VK_STRUCTURE_TYPE_CUDA_MODULE_CREATE_INFO_NV: VkStructureType =
  1000307000;
pub const VkStructureType_VK_STRUCTURE_TYPE_CUDA_FUNCTION_CREATE_INFO_NV: VkStructureType =
  1000307001;
pub const VkStructureType_VK_STRUCTURE_TYPE_CUDA_LAUNCH_INFO_NV: VkStructureType = 1000307002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUDA_KERNEL_LAUNCH_FEATURES_NV:
  VkStructureType = 1000307003;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUDA_KERNEL_LAUNCH_PROPERTIES_NV:
  VkStructureType = 1000307004;
pub const VkStructureType_VK_STRUCTURE_TYPE_QUERY_LOW_LATENCY_SUPPORT_NV: VkStructureType =
  1000310000;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXPORT_METAL_OBJECT_CREATE_INFO_EXT: VkStructureType =
  1000311000;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXPORT_METAL_OBJECTS_INFO_EXT: VkStructureType =
  1000311001;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXPORT_METAL_DEVICE_INFO_EXT: VkStructureType =
  1000311002;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXPORT_METAL_COMMAND_QUEUE_INFO_EXT: VkStructureType =
  1000311003;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXPORT_METAL_BUFFER_INFO_EXT: VkStructureType =
  1000311004;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMPORT_METAL_BUFFER_INFO_EXT: VkStructureType =
  1000311005;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXPORT_METAL_TEXTURE_INFO_EXT: VkStructureType =
  1000311006;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMPORT_METAL_TEXTURE_INFO_EXT: VkStructureType =
  1000311007;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXPORT_METAL_IO_SURFACE_INFO_EXT: VkStructureType =
  1000311008;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMPORT_METAL_IO_SURFACE_INFO_EXT: VkStructureType =
  1000311009;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXPORT_METAL_SHARED_EVENT_INFO_EXT: VkStructureType =
  1000311010;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMPORT_METAL_SHARED_EVENT_INFO_EXT: VkStructureType =
  1000311011;
pub const VkStructureType_VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_2_NV:
  VkStructureType = 1000314008;
pub const VkStructureType_VK_STRUCTURE_TYPE_CHECKPOINT_DATA_2_NV: VkStructureType = 1000314009;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_PROPERTIES_EXT:
  VkStructureType = 1000316000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_DENSITY_MAP_PROPERTIES_EXT : VkStructureType = 1000316001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_FEATURES_EXT:
  VkStructureType = 1000316002;
pub const VkStructureType_VK_STRUCTURE_TYPE_DESCRIPTOR_ADDRESS_INFO_EXT: VkStructureType =
  1000316003;
pub const VkStructureType_VK_STRUCTURE_TYPE_DESCRIPTOR_GET_INFO_EXT: VkStructureType = 1000316004;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT:
  VkStructureType = 1000316005;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT:
  VkStructureType = 1000316006;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_VIEW_CAPTURE_DESCRIPTOR_DATA_INFO_EXT:
  VkStructureType = 1000316007;
pub const VkStructureType_VK_STRUCTURE_TYPE_SAMPLER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT:
  VkStructureType = 1000316008;
pub const VkStructureType_VK_STRUCTURE_TYPE_OPAQUE_CAPTURE_DESCRIPTOR_DATA_CREATE_INFO_EXT:
  VkStructureType = 1000316010;
pub const VkStructureType_VK_STRUCTURE_TYPE_DESCRIPTOR_BUFFER_BINDING_INFO_EXT: VkStructureType =
  1000316011;
pub const VkStructureType_VK_STRUCTURE_TYPE_DESCRIPTOR_BUFFER_BINDING_PUSH_DESCRIPTOR_BUFFER_HANDLE_EXT : VkStructureType = 1000316012 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT : VkStructureType = 1000316009 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_FEATURES_EXT : VkStructureType = 1000320000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_PROPERTIES_EXT : VkStructureType = 1000320001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_LIBRARY_CREATE_INFO_EXT:
  VkStructureType = 1000320002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_FEATURES_AMD : VkStructureType = 1000321000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_KHR : VkStructureType = 1000203000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_PROPERTIES_KHR : VkStructureType = 1000322000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_FEATURES_KHR : VkStructureType = 1000323000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_PROPERTIES_NV : VkStructureType = 1000326000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_FEATURES_NV : VkStructureType = 1000326001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_ENUM_STATE_CREATE_INFO_NV : VkStructureType = 1000326002 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_MOTION_TRIANGLES_DATA_NV : VkStructureType = 1000327000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MOTION_BLUR_FEATURES_NV:
  VkStructureType = 1000327001;
pub const VkStructureType_VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MOTION_INFO_NV: VkStructureType =
  1000327002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_EXT:
  VkStructureType = 1000328000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_EXT:
  VkStructureType = 1000328001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_2_PLANE_444_FORMATS_FEATURES_EXT : VkStructureType = 1000330000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT:
  VkStructureType = 1000332000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT : VkStructureType = 1000332001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_COPY_COMMAND_TRANSFORM_INFO_QCOM: VkStructureType =
  1000333000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_FEATURES_KHR : VkStructureType = 1000336000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_FEATURES_EXT : VkStructureType = 1000338000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_CONTROL_EXT: VkStructureType =
  1000338001;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_PROPERTIES_EXT: VkStructureType =
  1000338004;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_FEATURES_EXT : VkStructureType = 1000339000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT:
  VkStructureType = 1000340000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FAULT_FEATURES_EXT: VkStructureType =
  1000341000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_FAULT_COUNTS_EXT: VkStructureType = 1000341001;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_FAULT_INFO_EXT: VkStructureType = 1000341002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RGBA10X6_FORMATS_FEATURES_EXT:
  VkStructureType = 1000344000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DIRECTFB_SURFACE_CREATE_INFO_EXT: VkStructureType =
  1000346000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_INPUT_DYNAMIC_STATE_FEATURES_EXT : VkStructureType = 1000352000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_VERTEX_INPUT_BINDING_DESCRIPTION_2_EXT:
  VkStructureType = 1000352001;
pub const VkStructureType_VK_STRUCTURE_TYPE_VERTEX_INPUT_ATTRIBUTE_DESCRIPTION_2_EXT:
  VkStructureType = 1000352002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRM_PROPERTIES_EXT: VkStructureType =
  1000353000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ADDRESS_BINDING_REPORT_FEATURES_EXT:
  VkStructureType = 1000354000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_ADDRESS_BINDING_CALLBACK_DATA_EXT:
  VkStructureType = 1000354001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_CONTROL_FEATURES_EXT:
  VkStructureType = 1000355000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_DEPTH_CLIP_CONTROL_CREATE_INFO_EXT:
  VkStructureType = 1000355001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVE_TOPOLOGY_LIST_RESTART_FEATURES_EXT : VkStructureType = 1000356000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMPORT_MEMORY_ZIRCON_HANDLE_INFO_FUCHSIA:
  VkStructureType = 1000364000;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_ZIRCON_HANDLE_PROPERTIES_FUCHSIA:
  VkStructureType = 1000364001;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_GET_ZIRCON_HANDLE_INFO_FUCHSIA: VkStructureType =
  1000364002;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_ZIRCON_HANDLE_INFO_FUCHSIA:
  VkStructureType = 1000365000;
pub const VkStructureType_VK_STRUCTURE_TYPE_SEMAPHORE_GET_ZIRCON_HANDLE_INFO_FUCHSIA:
  VkStructureType = 1000365001;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CREATE_INFO_FUCHSIA: VkStructureType =
  1000366000;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMPORT_MEMORY_BUFFER_COLLECTION_FUCHSIA:
  VkStructureType = 1000366001;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_COLLECTION_IMAGE_CREATE_INFO_FUCHSIA:
  VkStructureType = 1000366002;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_COLLECTION_PROPERTIES_FUCHSIA: VkStructureType =
  1000366003;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_CONSTRAINTS_INFO_FUCHSIA: VkStructureType =
  1000366004;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_COLLECTION_BUFFER_CREATE_INFO_FUCHSIA:
  VkStructureType = 1000366005;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_CONSTRAINTS_INFO_FUCHSIA: VkStructureType =
  1000366006;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_FORMAT_CONSTRAINTS_INFO_FUCHSIA: VkStructureType =
  1000366007;
pub const VkStructureType_VK_STRUCTURE_TYPE_SYSMEM_COLOR_SPACE_FUCHSIA: VkStructureType =
  1000366008;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CONSTRAINTS_INFO_FUCHSIA:
  VkStructureType = 1000366009;
pub const VkStructureType_VK_STRUCTURE_TYPE_SUBPASS_SHADING_PIPELINE_CREATE_INFO_HUAWEI:
  VkStructureType = 1000369000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_FEATURES_HUAWEI:
  VkStructureType = 1000369001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_PROPERTIES_HUAWEI:
  VkStructureType = 1000369002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INVOCATION_MASK_FEATURES_HUAWEI:
  VkStructureType = 1000370000;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_GET_REMOTE_ADDRESS_INFO_NV: VkStructureType =
  1000371000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_RDMA_FEATURES_NV:
  VkStructureType = 1000371001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_PROPERTIES_IDENTIFIER_EXT: VkStructureType =
  1000372000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROPERTIES_FEATURES_EXT:
  VkStructureType = 1000372001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAME_BOUNDARY_FEATURES_EXT:
  VkStructureType = 1000375000;
pub const VkStructureType_VK_STRUCTURE_TYPE_FRAME_BOUNDARY_EXT: VkStructureType = 1000375001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_FEATURES_EXT : VkStructureType = 1000376000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_SUBPASS_RESOLVE_PERFORMANCE_QUERY_EXT: VkStructureType =
  1000376001;
pub const VkStructureType_VK_STRUCTURE_TYPE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_INFO_EXT:
  VkStructureType = 1000376002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_2_FEATURES_EXT : VkStructureType = 1000377000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_SCREEN_SURFACE_CREATE_INFO_QNX: VkStructureType =
  1000378000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COLOR_WRITE_ENABLE_FEATURES_EXT:
  VkStructureType = 1000381000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_COLOR_WRITE_CREATE_INFO_EXT: VkStructureType =
  1000381001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVES_GENERATED_QUERY_FEATURES_EXT : VkStructureType = 1000382000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MAINTENANCE_1_FEATURES_KHR : VkStructureType = 1000386000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_MIN_LOD_FEATURES_EXT:
  VkStructureType = 1000391000;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_VIEW_MIN_LOD_CREATE_INFO_EXT: VkStructureType =
  1000391001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_FEATURES_EXT:
  VkStructureType = 1000392000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_PROPERTIES_EXT:
  VkStructureType = 1000392001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_2D_VIEW_OF_3D_FEATURES_EXT:
  VkStructureType = 1000393000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TILE_IMAGE_FEATURES_EXT:
  VkStructureType = 1000395000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TILE_IMAGE_PROPERTIES_EXT:
  VkStructureType = 1000395001;
pub const VkStructureType_VK_STRUCTURE_TYPE_MICROMAP_BUILD_INFO_EXT: VkStructureType = 1000396000;
pub const VkStructureType_VK_STRUCTURE_TYPE_MICROMAP_VERSION_INFO_EXT: VkStructureType = 1000396001;
pub const VkStructureType_VK_STRUCTURE_TYPE_COPY_MICROMAP_INFO_EXT: VkStructureType = 1000396002;
pub const VkStructureType_VK_STRUCTURE_TYPE_COPY_MICROMAP_TO_MEMORY_INFO_EXT: VkStructureType =
  1000396003;
pub const VkStructureType_VK_STRUCTURE_TYPE_COPY_MEMORY_TO_MICROMAP_INFO_EXT: VkStructureType =
  1000396004;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPACITY_MICROMAP_FEATURES_EXT:
  VkStructureType = 1000396005;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPACITY_MICROMAP_PROPERTIES_EXT:
  VkStructureType = 1000396006;
pub const VkStructureType_VK_STRUCTURE_TYPE_MICROMAP_CREATE_INFO_EXT: VkStructureType = 1000396007;
pub const VkStructureType_VK_STRUCTURE_TYPE_MICROMAP_BUILD_SIZES_INFO_EXT: VkStructureType =
  1000396008;
pub const VkStructureType_VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_TRIANGLES_OPACITY_MICROMAP_EXT : VkStructureType = 1000396009 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_FEATURES_HUAWEI : VkStructureType = 1000404000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_PROPERTIES_HUAWEI : VkStructureType = 1000404001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_VRS_FEATURES_HUAWEI : VkStructureType = 1000404002 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BORDER_COLOR_SWIZZLE_FEATURES_EXT:
  VkStructureType = 1000411000;
pub const VkStructureType_VK_STRUCTURE_TYPE_SAMPLER_BORDER_COLOR_COMPONENT_MAPPING_CREATE_INFO_EXT : VkStructureType = 1000411001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PAGEABLE_DEVICE_LOCAL_MEMORY_FEATURES_EXT : VkStructureType = 1000412000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_ARM:
  VkStructureType = 1000415000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_ROTATE_FEATURES_KHR:
  VkStructureType = 1000416000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_QUEUE_SHADER_CORE_CONTROL_CREATE_INFO_ARM:
  VkStructureType = 1000417000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCHEDULING_CONTROLS_FEATURES_ARM:
  VkStructureType = 1000417001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCHEDULING_CONTROLS_PROPERTIES_ARM:
  VkStructureType = 1000417002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_SLICED_VIEW_OF_3D_FEATURES_EXT:
  VkStructureType = 1000418000;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_VIEW_SLICED_CREATE_INFO_EXT: VkStructureType =
  1000418001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_SET_HOST_MAPPING_FEATURES_VALVE : VkStructureType = 1000420000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_DESCRIPTOR_SET_BINDING_REFERENCE_VALVE:
  VkStructureType = 1000420001;
pub const VkStructureType_VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_HOST_MAPPING_INFO_VALVE:
  VkStructureType = 1000420002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLAMP_ZERO_ONE_FEATURES_EXT:
  VkStructureType = 1000421000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_NON_SEAMLESS_CUBE_MAP_FEATURES_EXT:
  VkStructureType = 1000422000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RENDER_PASS_STRIPED_FEATURES_ARM:
  VkStructureType = 1000424000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RENDER_PASS_STRIPED_PROPERTIES_ARM:
  VkStructureType = 1000424001;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDER_PASS_STRIPE_BEGIN_INFO_ARM: VkStructureType =
  1000424002;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDER_PASS_STRIPE_INFO_ARM: VkStructureType =
  1000424003;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDER_PASS_STRIPE_SUBMIT_INFO_ARM: VkStructureType =
  1000424004;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_FEATURES_QCOM : VkStructureType = 1000425000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_PROPERTIES_QCOM : VkStructureType = 1000425001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_SUBPASS_FRAGMENT_DENSITY_MAP_OFFSET_END_INFO_QCOM:
  VkStructureType = 1000425002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_FEATURES_NV:
  VkStructureType = 1000426000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_PROPERTIES_NV:
  VkStructureType = 1000426001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_FEATURES_NV:
  VkStructureType = 1000427000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_PROPERTIES_NV:
  VkStructureType = 1000427001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_COMPUTE_FEATURES_NV : VkStructureType = 1000428000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_INDIRECT_BUFFER_INFO_NV:
  VkStructureType = 1000428001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_INDIRECT_DEVICE_ADDRESS_INFO_NV:
  VkStructureType = 1000428002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINEAR_COLOR_ATTACHMENT_FEATURES_NV:
  VkStructureType = 1000430000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MAXIMAL_RECONVERGENCE_FEATURES_KHR : VkStructureType = 1000434000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_FEATURES_EXT : VkStructureType = 1000437000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_FEATURES_QCOM:
  VkStructureType = 1000440000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_PROPERTIES_QCOM:
  VkStructureType = 1000440001;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_VIEW_SAMPLE_WEIGHT_CREATE_INFO_QCOM:
  VkStructureType = 1000440002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_NESTED_COMMAND_BUFFER_FEATURES_EXT:
  VkStructureType = 1000451000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_NESTED_COMMAND_BUFFER_PROPERTIES_EXT:
  VkStructureType = 1000451001;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_ACQUIRE_UNMODIFIED_EXT:
  VkStructureType = 1000453000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_FEATURES_EXT : VkStructureType = 1000455000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_PROPERTIES_EXT : VkStructureType = 1000455001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_MERGE_FEEDBACK_FEATURES_EXT:
  VkStructureType = 1000458000;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDER_PASS_CREATION_CONTROL_EXT: VkStructureType =
  1000458001;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDER_PASS_CREATION_FEEDBACK_CREATE_INFO_EXT:
  VkStructureType = 1000458002;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDER_PASS_SUBPASS_FEEDBACK_CREATE_INFO_EXT:
  VkStructureType = 1000458003;
pub const VkStructureType_VK_STRUCTURE_TYPE_DIRECT_DRIVER_LOADING_INFO_LUNARG: VkStructureType =
  1000459000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DIRECT_DRIVER_LOADING_LIST_LUNARG: VkStructureType =
  1000459001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_FEATURES_EXT : VkStructureType = 1000462000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_PROPERTIES_EXT : VkStructureType = 1000462001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_MODULE_IDENTIFIER_CREATE_INFO_EXT : VkStructureType = 1000462002 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_SHADER_MODULE_IDENTIFIER_EXT: VkStructureType =
  1000462003;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_EXT : VkStructureType = 1000342000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPTICAL_FLOW_FEATURES_NV:
  VkStructureType = 1000464000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPTICAL_FLOW_PROPERTIES_NV:
  VkStructureType = 1000464001;
pub const VkStructureType_VK_STRUCTURE_TYPE_OPTICAL_FLOW_IMAGE_FORMAT_INFO_NV: VkStructureType =
  1000464002;
pub const VkStructureType_VK_STRUCTURE_TYPE_OPTICAL_FLOW_IMAGE_FORMAT_PROPERTIES_NV:
  VkStructureType = 1000464003;
pub const VkStructureType_VK_STRUCTURE_TYPE_OPTICAL_FLOW_SESSION_CREATE_INFO_NV: VkStructureType =
  1000464004;
pub const VkStructureType_VK_STRUCTURE_TYPE_OPTICAL_FLOW_EXECUTE_INFO_NV: VkStructureType =
  1000464005;
pub const VkStructureType_VK_STRUCTURE_TYPE_OPTICAL_FLOW_SESSION_CREATE_PRIVATE_DATA_INFO_NV:
  VkStructureType = 1000464010;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LEGACY_DITHERING_FEATURES_EXT:
  VkStructureType = 1000465000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROTECTED_ACCESS_FEATURES_EXT : VkStructureType = 1000466000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FORMAT_RESOLVE_FEATURES_ANDROID : VkStructureType = 1000468000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FORMAT_RESOLVE_PROPERTIES_ANDROID : VkStructureType = 1000468001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_RESOLVE_PROPERTIES_ANDROID : VkStructureType = 1000468002 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_FEATURES_KHR:
  VkStructureType = 1000470000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_PROPERTIES_KHR:
  VkStructureType = 1000470001;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDERING_AREA_INFO_KHR: VkStructureType = 1000470003;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_IMAGE_SUBRESOURCE_INFO_KHR: VkStructureType =
  1000470004;
pub const VkStructureType_VK_STRUCTURE_TYPE_SUBRESOURCE_LAYOUT_2_KHR: VkStructureType = 1000338002;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_SUBRESOURCE_2_KHR: VkStructureType = 1000338003;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_CREATE_FLAGS_2_CREATE_INFO_KHR:
  VkStructureType = 1000470005;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_USAGE_FLAGS_2_CREATE_INFO_KHR: VkStructureType =
  1000470006;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_POSITION_FETCH_FEATURES_KHR : VkStructureType = 1000481000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_OBJECT_FEATURES_EXT:
  VkStructureType = 1000482000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_OBJECT_PROPERTIES_EXT:
  VkStructureType = 1000482001;
pub const VkStructureType_VK_STRUCTURE_TYPE_SHADER_CREATE_INFO_EXT: VkStructureType = 1000482002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TILE_PROPERTIES_FEATURES_QCOM:
  VkStructureType = 1000484000;
pub const VkStructureType_VK_STRUCTURE_TYPE_TILE_PROPERTIES_QCOM: VkStructureType = 1000484001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_AMIGO_PROFILING_FEATURES_SEC:
  VkStructureType = 1000485000;
pub const VkStructureType_VK_STRUCTURE_TYPE_AMIGO_PROFILING_SUBMIT_INFO_SEC: VkStructureType =
  1000485001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_VIEWPORTS_FEATURES_QCOM : VkStructureType = 1000488000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_FEATURES_NV : VkStructureType = 1000490000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_PROPERTIES_NV : VkStructureType = 1000490001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_SPARSE_ADDRESS_SPACE_FEATURES_NV : VkStructureType = 1000492000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_SPARSE_ADDRESS_SPACE_PROPERTIES_NV : VkStructureType = 1000492001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_EXT:
  VkStructureType = 1000351000;
pub const VkStructureType_VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_EXT:
  VkStructureType = 1000351002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LEGACY_VERTEX_ATTRIBUTES_FEATURES_EXT : VkStructureType = 1000495000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LEGACY_VERTEX_ATTRIBUTES_PROPERTIES_EXT : VkStructureType = 1000495001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_LAYER_SETTINGS_CREATE_INFO_EXT: VkStructureType =
  1000496000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_FEATURES_ARM:
  VkStructureType = 1000497000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_PROPERTIES_ARM:
  VkStructureType = 1000497001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_LIBRARY_GROUP_HANDLES_FEATURES_EXT : VkStructureType = 1000498000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_UNUSED_ATTACHMENTS_FEATURES_EXT : VkStructureType = 1000499000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_LATENCY_SLEEP_MODE_INFO_NV: VkStructureType =
  1000505000;
pub const VkStructureType_VK_STRUCTURE_TYPE_LATENCY_SLEEP_INFO_NV: VkStructureType = 1000505001;
pub const VkStructureType_VK_STRUCTURE_TYPE_SET_LATENCY_MARKER_INFO_NV: VkStructureType =
  1000505002;
pub const VkStructureType_VK_STRUCTURE_TYPE_GET_LATENCY_MARKER_INFO_NV: VkStructureType =
  1000505003;
pub const VkStructureType_VK_STRUCTURE_TYPE_LATENCY_TIMINGS_FRAME_REPORT_NV: VkStructureType =
  1000505004;
pub const VkStructureType_VK_STRUCTURE_TYPE_LATENCY_SUBMISSION_PRESENT_ID_NV: VkStructureType =
  1000505005;
pub const VkStructureType_VK_STRUCTURE_TYPE_OUT_OF_BAND_QUEUE_TYPE_INFO_NV: VkStructureType =
  1000505006;
pub const VkStructureType_VK_STRUCTURE_TYPE_SWAPCHAIN_LATENCY_CREATE_INFO_NV: VkStructureType =
  1000505007;
pub const VkStructureType_VK_STRUCTURE_TYPE_LATENCY_SURFACE_CAPABILITIES_NV: VkStructureType =
  1000505008;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_KHR:
  VkStructureType = 1000506000;
pub const VkStructureType_VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_KHR: VkStructureType =
  1000506001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_KHR:
  VkStructureType = 1000506002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_RENDER_AREAS_FEATURES_QCOM : VkStructureType = 1000510000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_MULTIVIEW_PER_VIEW_RENDER_AREAS_RENDER_PASS_BEGIN_INFO_QCOM : VkStructureType = 1000510001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_DECODE_AV1_CAPABILITIES_KHR: VkStructureType =
  1000512000;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_DECODE_AV1_PICTURE_INFO_KHR: VkStructureType =
  1000512001;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_DECODE_AV1_PROFILE_INFO_KHR: VkStructureType =
  1000512003;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_DECODE_AV1_SESSION_PARAMETERS_CREATE_INFO_KHR:
  VkStructureType = 1000512004;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_DECODE_AV1_DPB_SLOT_INFO_KHR: VkStructureType =
  1000512005;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_MAINTENANCE_1_FEATURES_KHR:
  VkStructureType = 1000515000;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_INLINE_QUERY_INFO_KHR: VkStructureType =
  1000515001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PER_STAGE_DESCRIPTOR_SET_FEATURES_NV:
  VkStructureType = 1000516000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_2_FEATURES_QCOM:
  VkStructureType = 1000518000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_2_PROPERTIES_QCOM:
  VkStructureType = 1000518001;
pub const VkStructureType_VK_STRUCTURE_TYPE_SAMPLER_BLOCK_MATCH_WINDOW_CREATE_INFO_QCOM:
  VkStructureType = 1000518002;
pub const VkStructureType_VK_STRUCTURE_TYPE_SAMPLER_CUBIC_WEIGHTS_CREATE_INFO_QCOM:
  VkStructureType = 1000519000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUBIC_WEIGHTS_FEATURES_QCOM:
  VkStructureType = 1000519001;
pub const VkStructureType_VK_STRUCTURE_TYPE_BLIT_IMAGE_CUBIC_WEIGHTS_INFO_QCOM: VkStructureType =
  1000519002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_DEGAMMA_FEATURES_QCOM:
  VkStructureType = 1000520000;
pub const VkStructureType_VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_YCBCR_DEGAMMA_CREATE_INFO_QCOM : VkStructureType = 1000520001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUBIC_CLAMP_FEATURES_QCOM:
  VkStructureType = 1000521000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_DYNAMIC_STATE_FEATURES_EXT : VkStructureType = 1000524000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_KHR : VkStructureType = 1000525000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_KHR:
  VkStructureType = 1000190001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_KHR : VkStructureType = 1000190002 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT_CONTROLS_2_FEATURES_KHR:
  VkStructureType = 1000528000;
pub const VkStructureType_VK_STRUCTURE_TYPE_SCREEN_BUFFER_PROPERTIES_QNX: VkStructureType =
  1000529000;
pub const VkStructureType_VK_STRUCTURE_TYPE_SCREEN_BUFFER_FORMAT_PROPERTIES_QNX: VkStructureType =
  1000529001;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMPORT_SCREEN_BUFFER_INFO_QNX: VkStructureType =
  1000529002;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_QNX: VkStructureType = 1000529003;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_SCREEN_BUFFER_FEATURES_QNX : VkStructureType = 1000529004 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LAYERED_DRIVER_PROPERTIES_MSFT:
  VkStructureType = 1000530000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_KHR:
  VkStructureType = 1000265000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_KHR:
  VkStructureType = 1000259000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_KHR:
  VkStructureType = 1000259001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_KHR:
  VkStructureType = 1000259002;
pub const VkStructureType_VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_KHR: VkStructureType =
  1000184000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_EXPECT_ASSUME_FEATURES_KHR:
  VkStructureType = 1000544000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_6_FEATURES_KHR:
  VkStructureType = 1000545000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_6_PROPERTIES_KHR:
  VkStructureType = 1000545001;
pub const VkStructureType_VK_STRUCTURE_TYPE_BIND_MEMORY_STATUS_KHR: VkStructureType = 1000545002;
pub const VkStructureType_VK_STRUCTURE_TYPE_BIND_DESCRIPTOR_SETS_INFO_KHR: VkStructureType =
  1000545003;
pub const VkStructureType_VK_STRUCTURE_TYPE_PUSH_CONSTANTS_INFO_KHR: VkStructureType = 1000545004;
pub const VkStructureType_VK_STRUCTURE_TYPE_PUSH_DESCRIPTOR_SET_INFO_KHR: VkStructureType =
  1000545005;
pub const VkStructureType_VK_STRUCTURE_TYPE_PUSH_DESCRIPTOR_SET_WITH_TEMPLATE_INFO_KHR:
  VkStructureType = 1000545006;
pub const VkStructureType_VK_STRUCTURE_TYPE_SET_DESCRIPTOR_BUFFER_OFFSETS_INFO_EXT:
  VkStructureType = 1000545007;
pub const VkStructureType_VK_STRUCTURE_TYPE_BIND_DESCRIPTOR_BUFFER_EMBEDDED_SAMPLERS_INFO_EXT:
  VkStructureType = 1000545008;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_POOL_OVERALLOCATION_FEATURES_NV : VkStructureType = 1000546000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAW_ACCESS_CHAINS_FEATURES_NV:
  VkStructureType = 1000555000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_RELAXED_EXTENDED_INSTRUCTION_FEATURES_KHR : VkStructureType = 1000558000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_7_FEATURES_KHR:
  VkStructureType = 1000562000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_7_PROPERTIES_KHR:
  VkStructureType = 1000562001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LAYERED_API_PROPERTIES_LIST_KHR:
  VkStructureType = 1000562002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LAYERED_API_PROPERTIES_KHR:
  VkStructureType = 1000562003;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LAYERED_API_VULKAN_PROPERTIES_KHR:
  VkStructureType = 1000562004;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT16_VECTOR_FEATURES_NV : VkStructureType = 1000563000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_REPLICATED_COMPOSITES_FEATURES_EXT : VkStructureType = 1000564000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_VALIDATION_FEATURES_NV:
  VkStructureType = 1000568000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ALIGNMENT_CONTROL_FEATURES_MESA : VkStructureType = 1000575000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ALIGNMENT_CONTROL_PROPERTIES_MESA : VkStructureType = 1000575001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_ALIGNMENT_CONTROL_CREATE_INFO_MESA:
  VkStructureType = 1000575002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES:
  VkStructureType = 1000120000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETER_FEATURES:
  VkStructureType = 1000063000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT: VkStructureType =
  1000011000;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDERING_INFO_KHR: VkStructureType = 1000044000;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO_KHR: VkStructureType =
  1000044001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO_KHR: VkStructureType =
  1000044002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES_KHR:
  VkStructureType = 1000044003;
pub const VkStructureType_VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO_KHR:
  VkStructureType = 1000044004;
pub const VkStructureType_VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_NV: VkStructureType =
  1000044008;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO_KHR: VkStructureType =
  1000053000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES_KHR:
  VkStructureType = 1000053001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES_KHR:
  VkStructureType = 1000053002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2_KHR: VkStructureType =
  1000059000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2_KHR: VkStructureType =
  1000059001;
pub const VkStructureType_VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2_KHR: VkStructureType = 1000059002;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2_KHR: VkStructureType =
  1000059003;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2_KHR:
  VkStructureType = 1000059004;
pub const VkStructureType_VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2_KHR: VkStructureType =
  1000059005;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2_KHR:
  VkStructureType = 1000059006;
pub const VkStructureType_VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2_KHR: VkStructureType =
  1000059007;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2_KHR:
  VkStructureType = 1000059008;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO_KHR: VkStructureType =
  1000060000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO_KHR:
  VkStructureType = 1000060003;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO_KHR:
  VkStructureType = 1000060004;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO_KHR: VkStructureType =
  1000060005;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO_KHR: VkStructureType =
  1000060006;
pub const VkStructureType_VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO_KHR:
  VkStructureType = 1000060013;
pub const VkStructureType_VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO_KHR:
  VkStructureType = 1000060014;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT : VkStructureType = 1000066000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES_KHR: VkStructureType =
  1000070000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO_KHR: VkStructureType =
  1000070001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO_KHR:
  VkStructureType = 1000071000;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES_KHR: VkStructureType =
  1000071001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO_KHR:
  VkStructureType = 1000071002;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES_KHR: VkStructureType =
  1000071003;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES_KHR: VkStructureType =
  1000071004;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO_KHR:
  VkStructureType = 1000072000;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_KHR: VkStructureType =
  1000072001;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_KHR: VkStructureType =
  1000072002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO_KHR:
  VkStructureType = 1000076000;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES_KHR: VkStructureType =
  1000076001;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO_KHR: VkStructureType =
  1000077000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES_KHR:
  VkStructureType = 1000082000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT16_INT8_FEATURES_KHR:
  VkStructureType = 1000082000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES_KHR:
  VkStructureType = 1000083000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO_KHR:
  VkStructureType = 1000085000;
pub const VkStructureType_VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT: VkStructureType = 1000090000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES_KHR:
  VkStructureType = 1000108000;
pub const VkStructureType_VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO_KHR:
  VkStructureType = 1000108001;
pub const VkStructureType_VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO_KHR: VkStructureType =
  1000108002;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO_KHR: VkStructureType =
  1000108003;
pub const VkStructureType_VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2_KHR: VkStructureType =
  1000109000;
pub const VkStructureType_VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2_KHR: VkStructureType =
  1000109001;
pub const VkStructureType_VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2_KHR: VkStructureType = 1000109002;
pub const VkStructureType_VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2_KHR: VkStructureType = 1000109003;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2_KHR: VkStructureType =
  1000109004;
pub const VkStructureType_VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO_KHR: VkStructureType = 1000109005;
pub const VkStructureType_VK_STRUCTURE_TYPE_SUBPASS_END_INFO_KHR: VkStructureType = 1000109006;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO_KHR:
  VkStructureType = 1000112000;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES_KHR: VkStructureType =
  1000112001;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO_KHR: VkStructureType =
  1000113000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES_KHR:
  VkStructureType = 1000117000;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO_KHR:
  VkStructureType = 1000117001;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO_KHR: VkStructureType =
  1000117002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO_KHR : VkStructureType = 1000117003 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES_KHR:
  VkStructureType = 1000120000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES_KHR:
  VkStructureType = 1000120000;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS_KHR: VkStructureType =
  1000127000;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO_KHR: VkStructureType =
  1000127001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT:
  VkStructureType = 1000130000;
pub const VkStructureType_VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT:
  VkStructureType = 1000130001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT:
  VkStructureType = 1000138000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT:
  VkStructureType = 1000138001;
pub const VkStructureType_VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT:
  VkStructureType = 1000138002;
pub const VkStructureType_VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT:
  VkStructureType = 1000138003;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2_KHR: VkStructureType =
  1000146000;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2_KHR: VkStructureType =
  1000146001;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2_KHR:
  VkStructureType = 1000146002;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2_KHR: VkStructureType = 1000146003;
pub const VkStructureType_VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2_KHR:
  VkStructureType = 1000146004;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO_KHR: VkStructureType =
  1000147000;
pub const VkStructureType_VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO_KHR:
  VkStructureType = 1000156000;
pub const VkStructureType_VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO_KHR: VkStructureType =
  1000156001;
pub const VkStructureType_VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO_KHR: VkStructureType =
  1000156002;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO_KHR:
  VkStructureType = 1000156003;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES_KHR : VkStructureType = 1000156004 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES_KHR:
  VkStructureType = 1000156005;
pub const VkStructureType_VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO_KHR: VkStructureType =
  1000157000;
pub const VkStructureType_VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO_KHR: VkStructureType =
  1000157001;
pub const VkStructureType_VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT:
  VkStructureType = 1000161000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT:
  VkStructureType = 1000161001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT:
  VkStructureType = 1000161002;
pub const VkStructureType_VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT : VkStructureType = 1000161003 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT : VkStructureType = 1000161004 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES_KHR:
  VkStructureType = 1000168000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT_KHR: VkStructureType =
  1000168001;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT:
  VkStructureType = 1000174000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES_KHR : VkStructureType = 1000175000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR:
  VkStructureType = 1000177000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES_KHR:
  VkStructureType = 1000180000;
pub const VkStructureType_VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT: VkStructureType =
  1000184000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT:
  VkStructureType = 1000190001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT : VkStructureType = 1000190002 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT:
  VkStructureType = 1000192000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES_KHR: VkStructureType =
  1000196000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES_KHR:
  VkStructureType = 1000197000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES_KHR:
  VkStructureType = 1000199000;
pub const VkStructureType_VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE_KHR:
  VkStructureType = 1000199001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV : VkStructureType = 1000203000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES_KHR:
  VkStructureType = 1000207000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES_KHR:
  VkStructureType = 1000207001;
pub const VkStructureType_VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO_KHR: VkStructureType =
  1000207002;
pub const VkStructureType_VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO_KHR: VkStructureType =
  1000207003;
pub const VkStructureType_VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO_KHR: VkStructureType = 1000207004;
pub const VkStructureType_VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO_KHR: VkStructureType = 1000207005;
pub const VkStructureType_VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL: VkStructureType =
  1000210000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES_KHR:
  VkStructureType = 1000211000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES_KHR : VkStructureType = 1000215000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES_EXT:
  VkStructureType = 1000221000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT:
  VkStructureType = 1000225000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT : VkStructureType = 1000225001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT:
  VkStructureType = 1000225002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES_KHR : VkStructureType = 1000241000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT_KHR:
  VkStructureType = 1000241001;
pub const VkStructureType_VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT_KHR:
  VkStructureType = 1000241002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_ADDRESS_FEATURES_EXT:
  VkStructureType = 1000244000;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_EXT: VkStructureType =
  1000244001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES_EXT: VkStructureType =
  1000245000;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO_EXT: VkStructureType =
  1000246000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES_KHR : VkStructureType = 1000253000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_KHR:
  VkStructureType = 1000257000;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_KHR: VkStructureType =
  1000244001;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO_KHR:
  VkStructureType = 1000257002;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO_KHR:
  VkStructureType = 1000257003;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO_KHR:
  VkStructureType = 1000257004;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT:
  VkStructureType = 1000259000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT:
  VkStructureType = 1000259001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT:
  VkStructureType = 1000259002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES_EXT:
  VkStructureType = 1000261000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT:
  VkStructureType = 1000265000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT : VkStructureType = 1000276000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES_KHR : VkStructureType = 1000280000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES_KHR : VkStructureType = 1000280001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT : VkStructureType = 1000281001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES_EXT:
  VkStructureType = 1000295000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO_EXT: VkStructureType =
  1000295001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO_EXT: VkStructureType =
  1000295002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES_EXT : VkStructureType = 1000297000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_BARRIER_2_KHR: VkStructureType = 1000314000;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2_KHR: VkStructureType =
  1000314001;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2_KHR: VkStructureType =
  1000314002;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEPENDENCY_INFO_KHR: VkStructureType = 1000314003;
pub const VkStructureType_VK_STRUCTURE_TYPE_SUBMIT_INFO_2_KHR: VkStructureType = 1000314004;
pub const VkStructureType_VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO_KHR: VkStructureType = 1000314005;
pub const VkStructureType_VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO_KHR: VkStructureType =
  1000314006;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES_KHR:
  VkStructureType = 1000314007;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES_KHR : VkStructureType = 1000325000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES_EXT:
  VkStructureType = 1000335000;
pub const VkStructureType_VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2_KHR: VkStructureType = 1000337000;
pub const VkStructureType_VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2_KHR: VkStructureType = 1000337001;
pub const VkStructureType_VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2_KHR: VkStructureType =
  1000337002;
pub const VkStructureType_VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2_KHR: VkStructureType =
  1000337003;
pub const VkStructureType_VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2_KHR: VkStructureType = 1000337004;
pub const VkStructureType_VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2_KHR: VkStructureType = 1000337005;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_COPY_2_KHR: VkStructureType = 1000337006;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_COPY_2_KHR: VkStructureType = 1000337007;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_BLIT_2_KHR: VkStructureType = 1000337008;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2_KHR: VkStructureType = 1000337009;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2_KHR: VkStructureType = 1000337010;
pub const VkStructureType_VK_STRUCTURE_TYPE_SUBRESOURCE_LAYOUT_2_EXT: VkStructureType = 1000338002;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_SUBRESOURCE_2_EXT: VkStructureType = 1000338003;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_ARM : VkStructureType = 1000342000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_VALVE : VkStructureType = 1000351000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_VALVE:
  VkStructureType = 1000351002;
pub const VkStructureType_VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3_KHR: VkStructureType = 1000360000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_INFO_EXT: VkStructureType = 1000269001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_EXT:
  VkStructureType = 1000388000;
pub const VkStructureType_VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_EXT:
  VkStructureType = 1000388001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES_KHR:
  VkStructureType = 1000413000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES_KHR:
  VkStructureType = 1000413001;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS_KHR: VkStructureType =
  1000413002;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS_KHR: VkStructureType =
  1000413003;
pub const VkStructureType_VK_STRUCTURE_TYPE_SHADER_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT:
  VkStructureType = 1000225001;
pub const VkStructureType_VK_STRUCTURE_TYPE_MAX_ENUM: VkStructureType = 2147483647;
pub type VkStructureType = ::std::os::raw::c_uint;
pub type VkAccessFlags = VkFlags;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkMemoryBarrier {
  pub sType: VkStructureType,
  pub pNext: *const ::std::os::raw::c_void,
  pub srcAccessMask: VkAccessFlags,
  pub dstAccessMask: VkAccessFlags,
}
#[test]
fn bindgen_test_layout_VkMemoryBarrier() {
  const UNINIT: ::std::mem::MaybeUninit<VkMemoryBarrier> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<VkMemoryBarrier>(),
    24usize,
    concat!("Size of: ", stringify!(VkMemoryBarrier))
  );
  assert_eq!(
    ::std::mem::align_of::<VkMemoryBarrier>(),
    8usize,
    concat!("Alignment of ", stringify!(VkMemoryBarrier))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(VkMemoryBarrier),
      "::",
      stringify!(sType)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(VkMemoryBarrier),
      "::",
      stringify!(pNext)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).srcAccessMask) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(VkMemoryBarrier),
      "::",
      stringify!(srcAccessMask)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).dstAccessMask) as usize - ptr as usize },
    20usize,
    concat!(
      "Offset of field: ",
      stringify!(VkMemoryBarrier),
      "::",
      stringify!(dstAccessMask)
    )
  );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union PfData {
  pub i: i64,
  pub d: f64,
  pub c: *mut PfContainer,
  pub dd: *mut PfContainer,
}
#[test]
fn bindgen_test_layout_PfData() {
  const UNINIT: ::std::mem::MaybeUninit<PfData> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<PfData>(),
    8usize,
    concat!("Size of: ", stringify!(PfData))
  );
  assert_eq!(
    ::std::mem::align_of::<PfData>(),
    8usize,
    concat!("Alignment of ", stringify!(PfData))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).i) as usize - ptr as usize },
    0usize,
    concat!("Offset of field: ", stringify!(PfData), "::", stringify!(i))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).d) as usize - ptr as usize },
    0usize,
    concat!("Offset of field: ", stringify!(PfData), "::", stringify!(d))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).c) as usize - ptr as usize },
    0usize,
    concat!("Offset of field: ", stringify!(PfData), "::", stringify!(c))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).dd) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(PfData),
      "::",
      stringify!(dd)
    )
  );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PfContainer {
  pub type_: ::std::os::raw::c_int,
  pub data: PfData,
  pub name: *mut ::std::os::raw::c_char,
  pub size: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_PfContainer() {
  const UNINIT: ::std::mem::MaybeUninit<PfContainer> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<PfContainer>(),
    32usize,
    concat!("Size of: ", stringify!(PfContainer))
  );
  assert_eq!(
    ::std::mem::align_of::<PfContainer>(),
    8usize,
    concat!("Alignment of ", stringify!(PfContainer))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(PfContainer),
      "::",
      stringify!(type_)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(PfContainer),
      "::",
      stringify!(data)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(PfContainer),
      "::",
      stringify!(name)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(PfContainer),
      "::",
      stringify!(size)
    )
  );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkFFTConfiguration {
  pub FFTdim: u64,
  pub size: [u64; 4usize],
  pub physicalDevice: *mut VkPhysicalDevice,
  pub device: *mut VkDevice,
  pub queue: *mut VkQueue,
  pub commandPool: *mut VkCommandPool,
  pub fence: *mut VkFence,
  pub isCompilerInitialized: u64,
  pub userTempBuffer: u64,
  pub bufferNum: u64,
  pub tempBufferNum: u64,
  pub inputBufferNum: u64,
  pub outputBufferNum: u64,
  pub kernelNum: u64,
  pub bufferSize: *mut u64,
  pub tempBufferSize: *mut u64,
  pub inputBufferSize: *mut u64,
  pub outputBufferSize: *mut u64,
  pub kernelSize: *mut u64,
  pub buffer: *mut VkBuffer,
  pub tempBuffer: *mut VkBuffer,
  pub inputBuffer: *mut VkBuffer,
  pub outputBuffer: *mut VkBuffer,
  pub kernel: *mut VkBuffer,
  pub bufferOffset: u64,
  pub tempBufferOffset: u64,
  pub inputBufferOffset: u64,
  pub outputBufferOffset: u64,
  pub kernelOffset: u64,
  pub specifyOffsetsAtLaunch: u64,
  pub pipelineCache: *mut VkPipelineCache,
  pub stagingBuffer: *mut VkBuffer,
  pub stagingBufferMemory: *mut VkDeviceMemory,
  pub coalescedMemory: u64,
  pub aimThreads: u64,
  pub numSharedBanks: u64,
  pub inverseReturnToInputBuffer: u64,
  pub numberBatches: u64,
  pub useUint64: u64,
  pub omitDimension: [u64; 4usize],
  pub performBandwidthBoost: ::std::os::raw::c_int,
  pub groupedBatch: [u64; 4usize],
  pub doublePrecision: u64,
  pub quadDoubleDoublePrecision: u64,
  pub quadDoubleDoublePrecisionDoubleMemory: u64,
  pub halfPrecision: u64,
  pub halfPrecisionMemoryOnly: u64,
  pub doublePrecisionFloatMemory: u64,
  pub performR2C: u64,
  pub performDCT: u64,
  pub performDST: u64,
  pub disableMergeSequencesR2C: u64,
  pub forceCallbackVersionRealTransforms: u64,
  pub normalize: u64,
  pub disableReorderFourStep: u64,
  pub useLUT: i64,
  pub useLUT_4step: i64,
  pub makeForwardPlanOnly: u64,
  pub makeInversePlanOnly: u64,
  pub bufferStride: [u64; 4usize],
  pub isInputFormatted: u64,
  pub isOutputFormatted: u64,
  pub inputBufferStride: [u64; 4usize],
  pub outputBufferStride: [u64; 4usize],
  pub swapTo2Stage4Step: u64,
  pub swapTo3Stage4Step: u64,
  pub considerAllAxesStrided: u64,
  pub keepShaderCode: u64,
  pub printMemoryLayout: u64,
  pub saveApplicationToString: u64,
  pub loadApplicationFromString: u64,
  pub loadApplicationString: *mut ::std::os::raw::c_void,
  pub disableSetLocale: u64,
  pub fixMaxRadixBluestein: u64,
  pub forceBluesteinSequenceSize: u64,
  pub useCustomBluesteinPaddingPattern: u64,
  pub primeSizes: *mut u64,
  pub paddedSizes: *mut u64,
  pub fixMinRaderPrimeMult: u64,
  pub fixMaxRaderPrimeMult: u64,
  pub fixMinRaderPrimeFFT: u64,
  pub fixMaxRaderPrimeFFT: u64,
  pub performZeropadding: [u64; 4usize],
  pub fft_zeropad_left: [u64; 4usize],
  pub fft_zeropad_right: [u64; 4usize],
  pub frequencyZeroPadding: u64,
  pub performConvolution: u64,
  pub conjugateConvolution: u64,
  pub crossPowerSpectrumNormalization: u64,
  pub coordinateFeatures: u64,
  pub matrixConvolution: u64,
  pub symmetricKernel: u64,
  pub numberKernels: u64,
  pub kernelConvolution: u64,
  pub registerBoost: u64,
  pub registerBoostNonPow2: u64,
  pub registerBoost4Step: u64,
  pub devicePageSize: u64,
  pub localPageSize: u64,
  pub computeCapabilityMajor: u64,
  pub computeCapabilityMinor: u64,
  pub maxComputeWorkGroupCount: [u64; 4usize],
  pub maxComputeWorkGroupSize: [u64; 4usize],
  pub maxThreadsNum: u64,
  pub sharedMemorySizeStatic: u64,
  pub sharedMemorySize: u64,
  pub sharedMemorySizePow2: u64,
  pub warpSize: u64,
  pub halfThreads: u64,
  pub allocateTempBuffer: u64,
  pub reorderFourStep: u64,
  pub maxCodeLength: i64,
  pub maxTempLength: i64,
  pub autoCustomBluesteinPaddingPattern: u64,
  pub useRaderUintLUT: u64,
  pub vendorID: u64,
  pub tempBufferDeviceMemory: VkDeviceMemory,
  pub commandBuffer: *mut VkCommandBuffer,
  pub memory_barrier: *mut VkMemoryBarrier,
}
#[test]
fn bindgen_test_layout_VkFFTConfiguration() {
  const UNINIT: ::std::mem::MaybeUninit<VkFFTConfiguration> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<VkFFTConfiguration>(),
    1216usize,
    concat!("Size of: ", stringify!(VkFFTConfiguration))
  );
  assert_eq!(
    ::std::mem::align_of::<VkFFTConfiguration>(),
    8usize,
    concat!("Alignment of ", stringify!(VkFFTConfiguration))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).FFTdim) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(FFTdim)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(size)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).physicalDevice) as usize - ptr as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(physicalDevice)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).device) as usize - ptr as usize },
    48usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(device)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).queue) as usize - ptr as usize },
    56usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(queue)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).commandPool) as usize - ptr as usize },
    64usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(commandPool)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).fence) as usize - ptr as usize },
    72usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(fence)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).isCompilerInitialized) as usize - ptr as usize },
    80usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(isCompilerInitialized)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).userTempBuffer) as usize - ptr as usize },
    88usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(userTempBuffer)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).bufferNum) as usize - ptr as usize },
    96usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(bufferNum)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).tempBufferNum) as usize - ptr as usize },
    104usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(tempBufferNum)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).inputBufferNum) as usize - ptr as usize },
    112usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(inputBufferNum)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).outputBufferNum) as usize - ptr as usize },
    120usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(outputBufferNum)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).kernelNum) as usize - ptr as usize },
    128usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(kernelNum)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).bufferSize) as usize - ptr as usize },
    136usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(bufferSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).tempBufferSize) as usize - ptr as usize },
    144usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(tempBufferSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).inputBufferSize) as usize - ptr as usize },
    152usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(inputBufferSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).outputBufferSize) as usize - ptr as usize },
    160usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(outputBufferSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).kernelSize) as usize - ptr as usize },
    168usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(kernelSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
    176usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(buffer)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).tempBuffer) as usize - ptr as usize },
    184usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(tempBuffer)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).inputBuffer) as usize - ptr as usize },
    192usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(inputBuffer)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).outputBuffer) as usize - ptr as usize },
    200usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(outputBuffer)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).kernel) as usize - ptr as usize },
    208usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(kernel)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).bufferOffset) as usize - ptr as usize },
    216usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(bufferOffset)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).tempBufferOffset) as usize - ptr as usize },
    224usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(tempBufferOffset)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).inputBufferOffset) as usize - ptr as usize },
    232usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(inputBufferOffset)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).outputBufferOffset) as usize - ptr as usize },
    240usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(outputBufferOffset)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).kernelOffset) as usize - ptr as usize },
    248usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(kernelOffset)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).specifyOffsetsAtLaunch) as usize - ptr as usize },
    256usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(specifyOffsetsAtLaunch)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).pipelineCache) as usize - ptr as usize },
    264usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(pipelineCache)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).stagingBuffer) as usize - ptr as usize },
    272usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(stagingBuffer)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).stagingBufferMemory) as usize - ptr as usize },
    280usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(stagingBufferMemory)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).coalescedMemory) as usize - ptr as usize },
    288usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(coalescedMemory)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).aimThreads) as usize - ptr as usize },
    296usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(aimThreads)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).numSharedBanks) as usize - ptr as usize },
    304usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(numSharedBanks)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).inverseReturnToInputBuffer) as usize - ptr as usize },
    312usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(inverseReturnToInputBuffer)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).numberBatches) as usize - ptr as usize },
    320usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(numberBatches)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).useUint64) as usize - ptr as usize },
    328usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(useUint64)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).omitDimension) as usize - ptr as usize },
    336usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(omitDimension)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).performBandwidthBoost) as usize - ptr as usize },
    368usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(performBandwidthBoost)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).groupedBatch) as usize - ptr as usize },
    376usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(groupedBatch)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).doublePrecision) as usize - ptr as usize },
    408usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(doublePrecision)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).quadDoubleDoublePrecision) as usize - ptr as usize },
    416usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(quadDoubleDoublePrecision)
    )
  );
  assert_eq!(
    unsafe {
      ::std::ptr::addr_of!((*ptr).quadDoubleDoublePrecisionDoubleMemory) as usize - ptr as usize
    },
    424usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(quadDoubleDoublePrecisionDoubleMemory)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).halfPrecision) as usize - ptr as usize },
    432usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(halfPrecision)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).halfPrecisionMemoryOnly) as usize - ptr as usize },
    440usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(halfPrecisionMemoryOnly)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).doublePrecisionFloatMemory) as usize - ptr as usize },
    448usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(doublePrecisionFloatMemory)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).performR2C) as usize - ptr as usize },
    456usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(performR2C)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).performDCT) as usize - ptr as usize },
    464usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(performDCT)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).performDST) as usize - ptr as usize },
    472usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(performDST)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).disableMergeSequencesR2C) as usize - ptr as usize },
    480usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(disableMergeSequencesR2C)
    )
  );
  assert_eq!(
    unsafe {
      ::std::ptr::addr_of!((*ptr).forceCallbackVersionRealTransforms) as usize - ptr as usize
    },
    488usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(forceCallbackVersionRealTransforms)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).normalize) as usize - ptr as usize },
    496usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(normalize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).disableReorderFourStep) as usize - ptr as usize },
    504usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(disableReorderFourStep)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).useLUT) as usize - ptr as usize },
    512usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(useLUT)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).useLUT_4step) as usize - ptr as usize },
    520usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(useLUT_4step)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).makeForwardPlanOnly) as usize - ptr as usize },
    528usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(makeForwardPlanOnly)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).makeInversePlanOnly) as usize - ptr as usize },
    536usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(makeInversePlanOnly)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).bufferStride) as usize - ptr as usize },
    544usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(bufferStride)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).isInputFormatted) as usize - ptr as usize },
    576usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(isInputFormatted)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).isOutputFormatted) as usize - ptr as usize },
    584usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(isOutputFormatted)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).inputBufferStride) as usize - ptr as usize },
    592usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(inputBufferStride)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).outputBufferStride) as usize - ptr as usize },
    624usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(outputBufferStride)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).swapTo2Stage4Step) as usize - ptr as usize },
    656usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(swapTo2Stage4Step)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).swapTo3Stage4Step) as usize - ptr as usize },
    664usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(swapTo3Stage4Step)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).considerAllAxesStrided) as usize - ptr as usize },
    672usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(considerAllAxesStrided)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).keepShaderCode) as usize - ptr as usize },
    680usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(keepShaderCode)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).printMemoryLayout) as usize - ptr as usize },
    688usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(printMemoryLayout)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).saveApplicationToString) as usize - ptr as usize },
    696usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(saveApplicationToString)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).loadApplicationFromString) as usize - ptr as usize },
    704usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(loadApplicationFromString)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).loadApplicationString) as usize - ptr as usize },
    712usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(loadApplicationString)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).disableSetLocale) as usize - ptr as usize },
    720usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(disableSetLocale)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).fixMaxRadixBluestein) as usize - ptr as usize },
    728usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(fixMaxRadixBluestein)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).forceBluesteinSequenceSize) as usize - ptr as usize },
    736usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(forceBluesteinSequenceSize)
    )
  );
  assert_eq!(
    unsafe {
      ::std::ptr::addr_of!((*ptr).useCustomBluesteinPaddingPattern) as usize - ptr as usize
    },
    744usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(useCustomBluesteinPaddingPattern)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).primeSizes) as usize - ptr as usize },
    752usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(primeSizes)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).paddedSizes) as usize - ptr as usize },
    760usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(paddedSizes)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).fixMinRaderPrimeMult) as usize - ptr as usize },
    768usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(fixMinRaderPrimeMult)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).fixMaxRaderPrimeMult) as usize - ptr as usize },
    776usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(fixMaxRaderPrimeMult)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).fixMinRaderPrimeFFT) as usize - ptr as usize },
    784usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(fixMinRaderPrimeFFT)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).fixMaxRaderPrimeFFT) as usize - ptr as usize },
    792usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(fixMaxRaderPrimeFFT)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).performZeropadding) as usize - ptr as usize },
    800usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(performZeropadding)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).fft_zeropad_left) as usize - ptr as usize },
    832usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(fft_zeropad_left)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).fft_zeropad_right) as usize - ptr as usize },
    864usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(fft_zeropad_right)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).frequencyZeroPadding) as usize - ptr as usize },
    896usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(frequencyZeroPadding)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).performConvolution) as usize - ptr as usize },
    904usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(performConvolution)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).conjugateConvolution) as usize - ptr as usize },
    912usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(conjugateConvolution)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).crossPowerSpectrumNormalization) as usize - ptr as usize },
    920usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(crossPowerSpectrumNormalization)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).coordinateFeatures) as usize - ptr as usize },
    928usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(coordinateFeatures)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).matrixConvolution) as usize - ptr as usize },
    936usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(matrixConvolution)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).symmetricKernel) as usize - ptr as usize },
    944usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(symmetricKernel)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).numberKernels) as usize - ptr as usize },
    952usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(numberKernels)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).kernelConvolution) as usize - ptr as usize },
    960usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(kernelConvolution)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).registerBoost) as usize - ptr as usize },
    968usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(registerBoost)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).registerBoostNonPow2) as usize - ptr as usize },
    976usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(registerBoostNonPow2)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).registerBoost4Step) as usize - ptr as usize },
    984usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(registerBoost4Step)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).devicePageSize) as usize - ptr as usize },
    992usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(devicePageSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).localPageSize) as usize - ptr as usize },
    1000usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(localPageSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).computeCapabilityMajor) as usize - ptr as usize },
    1008usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(computeCapabilityMajor)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).computeCapabilityMinor) as usize - ptr as usize },
    1016usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(computeCapabilityMinor)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).maxComputeWorkGroupCount) as usize - ptr as usize },
    1024usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(maxComputeWorkGroupCount)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).maxComputeWorkGroupSize) as usize - ptr as usize },
    1056usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(maxComputeWorkGroupSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).maxThreadsNum) as usize - ptr as usize },
    1088usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(maxThreadsNum)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).sharedMemorySizeStatic) as usize - ptr as usize },
    1096usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(sharedMemorySizeStatic)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).sharedMemorySize) as usize - ptr as usize },
    1104usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(sharedMemorySize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).sharedMemorySizePow2) as usize - ptr as usize },
    1112usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(sharedMemorySizePow2)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).warpSize) as usize - ptr as usize },
    1120usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(warpSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).halfThreads) as usize - ptr as usize },
    1128usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(halfThreads)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).allocateTempBuffer) as usize - ptr as usize },
    1136usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(allocateTempBuffer)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).reorderFourStep) as usize - ptr as usize },
    1144usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(reorderFourStep)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).maxCodeLength) as usize - ptr as usize },
    1152usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(maxCodeLength)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).maxTempLength) as usize - ptr as usize },
    1160usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(maxTempLength)
    )
  );
  assert_eq!(
    unsafe {
      ::std::ptr::addr_of!((*ptr).autoCustomBluesteinPaddingPattern) as usize - ptr as usize
    },
    1168usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(autoCustomBluesteinPaddingPattern)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).useRaderUintLUT) as usize - ptr as usize },
    1176usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(useRaderUintLUT)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).vendorID) as usize - ptr as usize },
    1184usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(vendorID)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).tempBufferDeviceMemory) as usize - ptr as usize },
    1192usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(tempBufferDeviceMemory)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).commandBuffer) as usize - ptr as usize },
    1200usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(commandBuffer)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).memory_barrier) as usize - ptr as usize },
    1208usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTConfiguration),
      "::",
      stringify!(memory_barrier)
    )
  );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkFFTLaunchParams {
  pub commandBuffer: *mut VkCommandBuffer,
  pub buffer: *mut VkBuffer,
  pub tempBuffer: *mut VkBuffer,
  pub inputBuffer: *mut VkBuffer,
  pub outputBuffer: *mut VkBuffer,
  pub kernel: *mut VkBuffer,
  pub bufferOffset: u64,
  pub tempBufferOffset: u64,
  pub inputBufferOffset: u64,
  pub outputBufferOffset: u64,
  pub kernelOffset: u64,
}
#[test]
fn bindgen_test_layout_VkFFTLaunchParams() {
  const UNINIT: ::std::mem::MaybeUninit<VkFFTLaunchParams> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<VkFFTLaunchParams>(),
    88usize,
    concat!("Size of: ", stringify!(VkFFTLaunchParams))
  );
  assert_eq!(
    ::std::mem::align_of::<VkFFTLaunchParams>(),
    8usize,
    concat!("Alignment of ", stringify!(VkFFTLaunchParams))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).commandBuffer) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTLaunchParams),
      "::",
      stringify!(commandBuffer)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTLaunchParams),
      "::",
      stringify!(buffer)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).tempBuffer) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTLaunchParams),
      "::",
      stringify!(tempBuffer)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).inputBuffer) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTLaunchParams),
      "::",
      stringify!(inputBuffer)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).outputBuffer) as usize - ptr as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTLaunchParams),
      "::",
      stringify!(outputBuffer)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).kernel) as usize - ptr as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTLaunchParams),
      "::",
      stringify!(kernel)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).bufferOffset) as usize - ptr as usize },
    48usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTLaunchParams),
      "::",
      stringify!(bufferOffset)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).tempBufferOffset) as usize - ptr as usize },
    56usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTLaunchParams),
      "::",
      stringify!(tempBufferOffset)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).inputBufferOffset) as usize - ptr as usize },
    64usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTLaunchParams),
      "::",
      stringify!(inputBufferOffset)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).outputBufferOffset) as usize - ptr as usize },
    72usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTLaunchParams),
      "::",
      stringify!(outputBufferOffset)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).kernelOffset) as usize - ptr as usize },
    80usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTLaunchParams),
      "::",
      stringify!(kernelOffset)
    )
  );
}
pub const VkFFTResult_VKFFT_SUCCESS: VkFFTResult = 0;
pub const VkFFTResult_VKFFT_ERROR_MALLOC_FAILED: VkFFTResult = 1;
pub const VkFFTResult_VKFFT_ERROR_INSUFFICIENT_CODE_BUFFER: VkFFTResult = 2;
pub const VkFFTResult_VKFFT_ERROR_INSUFFICIENT_TEMP_BUFFER: VkFFTResult = 3;
pub const VkFFTResult_VKFFT_ERROR_PLAN_NOT_INITIALIZED: VkFFTResult = 4;
pub const VkFFTResult_VKFFT_ERROR_NULL_TEMP_PASSED: VkFFTResult = 5;
pub const VkFFTResult_VKFFT_ERROR_MATH_FAILED: VkFFTResult = 6;
pub const VkFFTResult_VKFFT_ERROR_FFTdim_GT_MAX_FFT_DIMENSIONS: VkFFTResult = 7;
pub const VkFFTResult_VKFFT_ERROR_NONZERO_APP_INITIALIZATION: VkFFTResult = 8;
pub const VkFFTResult_VKFFT_ERROR_INVALID_PHYSICAL_DEVICE: VkFFTResult = 1001;
pub const VkFFTResult_VKFFT_ERROR_INVALID_DEVICE: VkFFTResult = 1002;
pub const VkFFTResult_VKFFT_ERROR_INVALID_QUEUE: VkFFTResult = 1003;
pub const VkFFTResult_VKFFT_ERROR_INVALID_COMMAND_POOL: VkFFTResult = 1004;
pub const VkFFTResult_VKFFT_ERROR_INVALID_FENCE: VkFFTResult = 1005;
pub const VkFFTResult_VKFFT_ERROR_ONLY_FORWARD_FFT_INITIALIZED: VkFFTResult = 1006;
pub const VkFFTResult_VKFFT_ERROR_ONLY_INVERSE_FFT_INITIALIZED: VkFFTResult = 1007;
pub const VkFFTResult_VKFFT_ERROR_INVALID_CONTEXT: VkFFTResult = 1008;
pub const VkFFTResult_VKFFT_ERROR_INVALID_PLATFORM: VkFFTResult = 1009;
pub const VkFFTResult_VKFFT_ERROR_ENABLED_saveApplicationToString: VkFFTResult = 1010;
pub const VkFFTResult_VKFFT_ERROR_EMPTY_FILE: VkFFTResult = 1011;
pub const VkFFTResult_VKFFT_ERROR_EMPTY_FFTdim: VkFFTResult = 2001;
pub const VkFFTResult_VKFFT_ERROR_EMPTY_size: VkFFTResult = 2002;
pub const VkFFTResult_VKFFT_ERROR_EMPTY_bufferSize: VkFFTResult = 2003;
pub const VkFFTResult_VKFFT_ERROR_EMPTY_buffer: VkFFTResult = 2004;
pub const VkFFTResult_VKFFT_ERROR_EMPTY_tempBufferSize: VkFFTResult = 2005;
pub const VkFFTResult_VKFFT_ERROR_EMPTY_tempBuffer: VkFFTResult = 2006;
pub const VkFFTResult_VKFFT_ERROR_EMPTY_inputBufferSize: VkFFTResult = 2007;
pub const VkFFTResult_VKFFT_ERROR_EMPTY_inputBuffer: VkFFTResult = 2008;
pub const VkFFTResult_VKFFT_ERROR_EMPTY_outputBufferSize: VkFFTResult = 2009;
pub const VkFFTResult_VKFFT_ERROR_EMPTY_outputBuffer: VkFFTResult = 2010;
pub const VkFFTResult_VKFFT_ERROR_EMPTY_kernelSize: VkFFTResult = 2011;
pub const VkFFTResult_VKFFT_ERROR_EMPTY_kernel: VkFFTResult = 2012;
pub const VkFFTResult_VKFFT_ERROR_EMPTY_applicationString: VkFFTResult = 2013;
pub const VkFFTResult_VKFFT_ERROR_EMPTY_useCustomBluesteinPaddingPattern_arrays: VkFFTResult = 2014;
pub const VkFFTResult_VKFFT_ERROR_EMPTY_app: VkFFTResult = 2015;
pub const VkFFTResult_VKFFT_ERROR_INVALID_user_tempBuffer_too_small: VkFFTResult = 2016;
pub const VkFFTResult_VKFFT_ERROR_UNSUPPORTED_RADIX: VkFFTResult = 3001;
pub const VkFFTResult_VKFFT_ERROR_UNSUPPORTED_FFT_LENGTH: VkFFTResult = 3002;
pub const VkFFTResult_VKFFT_ERROR_UNSUPPORTED_FFT_LENGTH_R2C: VkFFTResult = 3003;
pub const VkFFTResult_VKFFT_ERROR_UNSUPPORTED_FFT_LENGTH_R2R: VkFFTResult = 3004;
pub const VkFFTResult_VKFFT_ERROR_UNSUPPORTED_FFT_OMIT: VkFFTResult = 3005;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_ALLOCATE: VkFFTResult = 4001;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_MAP_MEMORY: VkFFTResult = 4002;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_ALLOCATE_COMMAND_BUFFERS: VkFFTResult = 4003;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_BEGIN_COMMAND_BUFFER: VkFFTResult = 4004;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_END_COMMAND_BUFFER: VkFFTResult = 4005;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_SUBMIT_QUEUE: VkFFTResult = 4006;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_WAIT_FOR_FENCES: VkFFTResult = 4007;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_RESET_FENCES: VkFFTResult = 4008;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_CREATE_DESCRIPTOR_POOL: VkFFTResult = 4009;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_CREATE_DESCRIPTOR_SET_LAYOUT: VkFFTResult = 4010;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_ALLOCATE_DESCRIPTOR_SETS: VkFFTResult = 4011;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_CREATE_PIPELINE_LAYOUT: VkFFTResult = 4012;
pub const VkFFTResult_VKFFT_ERROR_FAILED_SHADER_PREPROCESS: VkFFTResult = 4013;
pub const VkFFTResult_VKFFT_ERROR_FAILED_SHADER_PARSE: VkFFTResult = 4014;
pub const VkFFTResult_VKFFT_ERROR_FAILED_SHADER_LINK: VkFFTResult = 4015;
pub const VkFFTResult_VKFFT_ERROR_FAILED_SPIRV_GENERATE: VkFFTResult = 4016;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_CREATE_SHADER_MODULE: VkFFTResult = 4017;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_CREATE_INSTANCE: VkFFTResult = 4018;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_SETUP_DEBUG_MESSENGER: VkFFTResult = 4019;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_FIND_PHYSICAL_DEVICE: VkFFTResult = 4020;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_CREATE_DEVICE: VkFFTResult = 4021;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_CREATE_FENCE: VkFFTResult = 4022;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_CREATE_COMMAND_POOL: VkFFTResult = 4023;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_CREATE_BUFFER: VkFFTResult = 4024;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_ALLOCATE_MEMORY: VkFFTResult = 4025;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_BIND_BUFFER_MEMORY: VkFFTResult = 4026;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_FIND_MEMORY: VkFFTResult = 4027;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_SYNCHRONIZE: VkFFTResult = 4028;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_COPY: VkFFTResult = 4029;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_CREATE_PROGRAM: VkFFTResult = 4030;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_COMPILE_PROGRAM: VkFFTResult = 4031;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_GET_CODE_SIZE: VkFFTResult = 4032;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_GET_CODE: VkFFTResult = 4033;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_DESTROY_PROGRAM: VkFFTResult = 4034;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_LOAD_MODULE: VkFFTResult = 4035;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_GET_FUNCTION: VkFFTResult = 4036;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_SET_DYNAMIC_SHARED_MEMORY: VkFFTResult = 4037;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_MODULE_GET_GLOBAL: VkFFTResult = 4038;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_LAUNCH_KERNEL: VkFFTResult = 4039;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_EVENT_RECORD: VkFFTResult = 4040;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_ADD_NAME_EXPRESSION: VkFFTResult = 4041;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_INITIALIZE: VkFFTResult = 4042;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_SET_DEVICE_ID: VkFFTResult = 4043;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_GET_DEVICE: VkFFTResult = 4044;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_CREATE_CONTEXT: VkFFTResult = 4045;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_CREATE_PIPELINE: VkFFTResult = 4046;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_SET_KERNEL_ARG: VkFFTResult = 4047;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_CREATE_COMMAND_QUEUE: VkFFTResult = 4048;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_RELEASE_COMMAND_QUEUE: VkFFTResult = 4049;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_ENUMERATE_DEVICES: VkFFTResult = 4050;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_GET_ATTRIBUTE: VkFFTResult = 4051;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_CREATE_EVENT: VkFFTResult = 4052;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_CREATE_COMMAND_LIST: VkFFTResult = 4053;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_DESTROY_COMMAND_LIST: VkFFTResult = 4054;
pub const VkFFTResult_VKFFT_ERROR_FAILED_TO_SUBMIT_BARRIER: VkFFTResult = 4055;
pub type VkFFTResult = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkFFTRaderContainer {
  pub prime: ::std::os::raw::c_int,
  pub generator: ::std::os::raw::c_int,
  pub multiplier: ::std::os::raw::c_int,
  pub inline_rader_g_pow: ::std::os::raw::c_int,
  pub raderUintLUToffset: ::std::os::raw::c_int,
  pub type_: ::std::os::raw::c_int,
  pub raderRegisters: ::std::os::raw::c_int,
  pub rader_min_registers: ::std::os::raw::c_int,
  pub registers_per_thread: ::std::os::raw::c_int,
  pub min_registers_per_thread: ::std::os::raw::c_int,
  pub loc_multipliers: [::std::os::raw::c_int; 33usize],
  pub registers_per_thread_per_radix: [::std::os::raw::c_int; 33usize],
  pub stageRadix: [::std::os::raw::c_int; 20usize],
  pub numStages: ::std::os::raw::c_int,
  pub numSubPrimes: ::std::os::raw::c_int,
  pub stage_rader_generator: [::std::os::raw::c_int; 20usize],
  pub containerFFTDim: ::std::os::raw::c_int,
  pub containerFFTNum: ::std::os::raw::c_int,
  pub subLogicalGroupSizeMax: ::std::os::raw::c_int,
  pub RaderKernelOffsetLUT: i64,
  pub RaderRadixOffsetLUT: i64,
  pub RaderRadixOffsetLUTiFFT: i64,
  pub g_powConstantStruct: PfContainer,
  pub r_rader_kernelConstantStruct: PfContainer,
  pub i_rader_kernelConstantStruct: PfContainer,
  pub raderFFTkernel: *mut ::std::os::raw::c_void,
  pub container: *mut VkFFTRaderContainer,
}
#[test]
fn bindgen_test_layout_VkFFTRaderContainer() {
  const UNINIT: ::std::mem::MaybeUninit<VkFFTRaderContainer> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<VkFFTRaderContainer>(),
    624usize,
    concat!("Size of: ", stringify!(VkFFTRaderContainer))
  );
  assert_eq!(
    ::std::mem::align_of::<VkFFTRaderContainer>(),
    8usize,
    concat!("Alignment of ", stringify!(VkFFTRaderContainer))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).prime) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTRaderContainer),
      "::",
      stringify!(prime)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).generator) as usize - ptr as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTRaderContainer),
      "::",
      stringify!(generator)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).multiplier) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTRaderContainer),
      "::",
      stringify!(multiplier)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).inline_rader_g_pow) as usize - ptr as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTRaderContainer),
      "::",
      stringify!(inline_rader_g_pow)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).raderUintLUToffset) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTRaderContainer),
      "::",
      stringify!(raderUintLUToffset)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
    20usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTRaderContainer),
      "::",
      stringify!(type_)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).raderRegisters) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTRaderContainer),
      "::",
      stringify!(raderRegisters)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).rader_min_registers) as usize - ptr as usize },
    28usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTRaderContainer),
      "::",
      stringify!(rader_min_registers)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).registers_per_thread) as usize - ptr as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTRaderContainer),
      "::",
      stringify!(registers_per_thread)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).min_registers_per_thread) as usize - ptr as usize },
    36usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTRaderContainer),
      "::",
      stringify!(min_registers_per_thread)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).loc_multipliers) as usize - ptr as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTRaderContainer),
      "::",
      stringify!(loc_multipliers)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).registers_per_thread_per_radix) as usize - ptr as usize },
    172usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTRaderContainer),
      "::",
      stringify!(registers_per_thread_per_radix)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).stageRadix) as usize - ptr as usize },
    304usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTRaderContainer),
      "::",
      stringify!(stageRadix)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).numStages) as usize - ptr as usize },
    384usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTRaderContainer),
      "::",
      stringify!(numStages)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).numSubPrimes) as usize - ptr as usize },
    388usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTRaderContainer),
      "::",
      stringify!(numSubPrimes)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).stage_rader_generator) as usize - ptr as usize },
    392usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTRaderContainer),
      "::",
      stringify!(stage_rader_generator)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).containerFFTDim) as usize - ptr as usize },
    472usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTRaderContainer),
      "::",
      stringify!(containerFFTDim)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).containerFFTNum) as usize - ptr as usize },
    476usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTRaderContainer),
      "::",
      stringify!(containerFFTNum)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).subLogicalGroupSizeMax) as usize - ptr as usize },
    480usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTRaderContainer),
      "::",
      stringify!(subLogicalGroupSizeMax)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).RaderKernelOffsetLUT) as usize - ptr as usize },
    488usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTRaderContainer),
      "::",
      stringify!(RaderKernelOffsetLUT)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).RaderRadixOffsetLUT) as usize - ptr as usize },
    496usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTRaderContainer),
      "::",
      stringify!(RaderRadixOffsetLUT)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).RaderRadixOffsetLUTiFFT) as usize - ptr as usize },
    504usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTRaderContainer),
      "::",
      stringify!(RaderRadixOffsetLUTiFFT)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).g_powConstantStruct) as usize - ptr as usize },
    512usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTRaderContainer),
      "::",
      stringify!(g_powConstantStruct)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).r_rader_kernelConstantStruct) as usize - ptr as usize },
    544usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTRaderContainer),
      "::",
      stringify!(r_rader_kernelConstantStruct)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).i_rader_kernelConstantStruct) as usize - ptr as usize },
    576usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTRaderContainer),
      "::",
      stringify!(i_rader_kernelConstantStruct)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).raderFFTkernel) as usize - ptr as usize },
    608usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTRaderContainer),
      "::",
      stringify!(raderFFTkernel)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).container) as usize - ptr as usize },
    616usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTRaderContainer),
      "::",
      stringify!(container)
    )
  );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkFFTSpecializationConstantsLayout {
  pub res: VkFFTResult,
  pub double_PI: f64,
  pub numFFTdims: ::std::os::raw::c_int,
  pub size: [PfContainer; 4usize],
  pub localSize: [PfContainer; 3usize],
  pub numSubgroups: ::std::os::raw::c_int,
  pub sourceFFTSize: PfContainer,
  pub fftDim: PfContainer,
  pub precision: ::std::os::raw::c_int,
  pub inverse: ::std::os::raw::c_int,
  pub actualInverse: ::std::os::raw::c_int,
  pub inverseBluestein: ::std::os::raw::c_int,
  pub zeropad: [::std::os::raw::c_int; 2usize],
  pub zeropadBluestein: [::std::os::raw::c_int; 2usize],
  pub axis_id: ::std::os::raw::c_int,
  pub axis_upload_id: ::std::os::raw::c_int,
  pub numAxisUploads: ::std::os::raw::c_int,
  pub registers_per_thread: ::std::os::raw::c_int,
  pub registers_per_thread_per_radix: [::std::os::raw::c_int; 33usize],
  pub min_registers_per_thread: ::std::os::raw::c_int,
  pub maxNonPow2Radix: ::std::os::raw::c_int,
  pub usedLocRegs: ::std::os::raw::c_int,
  pub readToRegisters: ::std::os::raw::c_int,
  pub writeFromRegisters: ::std::os::raw::c_int,
  pub LUT: ::std::os::raw::c_int,
  pub LUT_4step: ::std::os::raw::c_int,
  pub raderUintLUT: ::std::os::raw::c_int,
  pub useCoalescedLUTUploadToSM: ::std::os::raw::c_int,
  pub useBluesteinFFT: ::std::os::raw::c_int,
  pub reverseBluesteinMultiUpload: ::std::os::raw::c_int,
  pub BluesteinConvolutionStep: ::std::os::raw::c_int,
  pub BluesteinPreMultiplication: ::std::os::raw::c_int,
  pub BluesteinPostMultiplication: ::std::os::raw::c_int,
  pub startDCT3LUT: PfContainer,
  pub startDCT4LUT: PfContainer,
  pub performR2C: ::std::os::raw::c_int,
  pub performR2CmultiUpload: ::std::os::raw::c_int,
  pub performR2RmultiUpload: ::std::os::raw::c_int,
  pub performDCT: ::std::os::raw::c_int,
  pub performDST: ::std::os::raw::c_int,
  pub performBandwidthBoost: ::std::os::raw::c_int,
  pub frequencyZeropadding: ::std::os::raw::c_int,
  pub performZeropaddingFull: [::std::os::raw::c_int; 4usize],
  pub performZeropaddingInput: [::std::os::raw::c_int; 4usize],
  pub performZeropaddingOutput: [::std::os::raw::c_int; 4usize],
  pub fft_zeropad_left_full: [PfContainer; 4usize],
  pub fft_zeropad_left_read: [PfContainer; 4usize],
  pub fft_zeropad_left_write: [PfContainer; 4usize],
  pub fft_zeropad_right_full: [PfContainer; 4usize],
  pub fft_zeropad_right_read: [PfContainer; 4usize],
  pub fft_zeropad_right_write: [PfContainer; 4usize],
  pub fft_zeropad_Bluestein_left_read: [PfContainer; 4usize],
  pub fft_zeropad_Bluestein_left_write: [PfContainer; 4usize],
  pub fft_zeropad_Bluestein_right_read: [PfContainer; 4usize],
  pub fft_zeropad_Bluestein_right_write: [PfContainer; 4usize],
  pub inputStride: [PfContainer; 6usize],
  pub outputStride: [PfContainer; 6usize],
  pub fft_dim_full: PfContainer,
  pub stageStartSize: PfContainer,
  pub firstStageStartSize: PfContainer,
  pub fft_dim_x: PfContainer,
  pub dispatchZactualFFTSize: PfContainer,
  pub numStages: ::std::os::raw::c_int,
  pub stageRadix: [::std::os::raw::c_int; 33usize],
  pub inputOffset: PfContainer,
  pub kernelOffset: PfContainer,
  pub outputOffset: PfContainer,
  pub reorderFourStep: ::std::os::raw::c_int,
  pub storeSharedComplexComponentsSeparately: ::std::os::raw::c_int,
  pub pushConstantsStructSize: ::std::os::raw::c_int,
  pub performWorkGroupShift: [::std::os::raw::c_int; 4usize],
  pub performPostCompilationInputOffset: ::std::os::raw::c_int,
  pub performPostCompilationOutputOffset: ::std::os::raw::c_int,
  pub performPostCompilationKernelOffset: ::std::os::raw::c_int,
  pub inputBufferBlockNum: u64,
  pub inputBufferBlockSize: u64,
  pub outputBufferBlockNum: u64,
  pub outputBufferBlockSize: u64,
  pub kernelBlockNum: u64,
  pub kernelBlockSize: u64,
  pub numCoordinates: ::std::os::raw::c_int,
  pub matrixConvolution: ::std::os::raw::c_int,
  pub numBatches: PfContainer,
  pub numKernels: PfContainer,
  pub conjugateConvolution: ::std::os::raw::c_int,
  pub crossPowerSpectrumNormalization: ::std::os::raw::c_int,
  pub usedSharedMemory: PfContainer,
  pub sharedMemSize: ::std::os::raw::c_int,
  pub sharedMemSizePow2: ::std::os::raw::c_int,
  pub normalize: ::std::os::raw::c_int,
  pub complexSize: ::std::os::raw::c_int,
  pub inputNumberByteSize: ::std::os::raw::c_int,
  pub outputNumberByteSize: ::std::os::raw::c_int,
  pub kernelNumberByteSize: ::std::os::raw::c_int,
  pub maxStageSumLUT: ::std::os::raw::c_int,
  pub swapComputeWorkGroupID: ::std::os::raw::c_int,
  pub convolutionStep: ::std::os::raw::c_int,
  pub symmetricKernel: ::std::os::raw::c_int,
  pub supportAxis: ::std::os::raw::c_int,
  pub cacheShuffle: ::std::os::raw::c_int,
  pub registerBoost: ::std::os::raw::c_int,
  pub warpSize: ::std::os::raw::c_int,
  pub numSharedBanks: ::std::os::raw::c_int,
  pub resolveBankConflictFirstStages: ::std::os::raw::c_int,
  pub sharedStrideBankConflictFirstStages: PfContainer,
  pub sharedStrideReadWriteConflict: PfContainer,
  pub sharedStrideRaderFFT: PfContainer,
  pub sharedShiftRaderFFT: PfContainer,
  pub maxSharedStride: PfContainer,
  pub maxSingleSizeStrided: PfContainer,
  pub axisSwapped: ::std::os::raw::c_int,
  pub stridedSharedLayout: ::std::os::raw::c_int,
  pub mergeSequencesR2C: ::std::os::raw::c_int,
  pub forceCallbackVersionRealTransforms: ::std::os::raw::c_int,
  pub numBuffersBound: [::std::os::raw::c_int; 10usize],
  pub convolutionBindingID: ::std::os::raw::c_int,
  pub LUTBindingID: ::std::os::raw::c_int,
  pub BluesteinConvolutionBindingID: ::std::os::raw::c_int,
  pub BluesteinMultiplicationBindingID: ::std::os::raw::c_int,
  pub useRader: ::std::os::raw::c_int,
  pub numRaderPrimes: ::std::os::raw::c_int,
  pub minRaderFFTThreadNum: ::std::os::raw::c_int,
  pub raderContainer: *mut VkFFTRaderContainer,
  pub currentRaderContainer: *mut VkFFTRaderContainer,
  pub RaderUintLUTBindingID: ::std::os::raw::c_int,
  pub useRaderMult: ::std::os::raw::c_int,
  pub additionalRaderSharedSize: PfContainer,
  pub RaderKernelOffsetShared: [PfContainer; 33usize],
  pub RaderKernelOffsetLUT: [PfContainer; 33usize],
  pub rader_generator: [::std::os::raw::c_int; 33usize],
  pub fixMinRaderPrimeMult: ::std::os::raw::c_int,
  pub fixMaxRaderPrimeMult: ::std::os::raw::c_int,
  pub fixMinRaderPrimeFFT: ::std::os::raw::c_int,
  pub fixMaxRaderPrimeFFT: ::std::os::raw::c_int,
  pub inline_rader_g_pow: ::std::os::raw::c_int,
  pub inline_rader_kernel: ::std::os::raw::c_int,
  pub raderRegisters: ::std::os::raw::c_int,
  pub rader_min_registers: ::std::os::raw::c_int,
  pub useRaderFFT: ::std::os::raw::c_int,
  pub performOffsetUpdate: ::std::os::raw::c_int,
  pub performBufferSetUpdate: ::std::os::raw::c_int,
  pub useUint64: ::std::os::raw::c_int,
  pub disableSetLocale: ::std::os::raw::c_int,
  pub regIDs: *mut PfContainer,
  pub regIDs_copy: *mut PfContainer,
  pub temp_conv: *mut PfContainer,
  pub disableThreadsStart: *mut PfContainer,
  pub disableThreadsEnd: *mut PfContainer,
  pub sdataID: PfContainer,
  pub inoutID: PfContainer,
  pub inoutID2: PfContainer,
  pub inoutID_x: PfContainer,
  pub inoutID_y: PfContainer,
  pub combinedID: PfContainer,
  pub LUTId: PfContainer,
  pub raderIDx: PfContainer,
  pub raderIDx2: PfContainer,
  pub offsetImaginaryShared: PfContainer,
  pub gl_LocalInvocationID_x: PfContainer,
  pub gl_LocalInvocationID_y: PfContainer,
  pub gl_LocalInvocationID_z: PfContainer,
  pub gl_GlobalInvocationID_x: PfContainer,
  pub gl_GlobalInvocationID_y: PfContainer,
  pub gl_GlobalInvocationID_z: PfContainer,
  pub gl_SubgroupInvocationID: PfContainer,
  pub gl_SubgroupID: PfContainer,
  pub tshuffle: PfContainer,
  pub sharedStride: PfContainer,
  pub gl_WorkGroupSize_x: PfContainer,
  pub gl_WorkGroupSize_y: PfContainer,
  pub gl_WorkGroupSize_z: PfContainer,
  pub halfDef: PfContainer,
  pub floatDef: PfContainer,
  pub doubleDef: PfContainer,
  pub quadDef: PfContainer,
  pub half2Def: PfContainer,
  pub float2Def: PfContainer,
  pub double2Def: PfContainer,
  pub quad2Def: PfContainer,
  pub halfLiteral: PfContainer,
  pub floatLiteral: PfContainer,
  pub doubleLiteral: PfContainer,
  pub intDef: PfContainer,
  pub uintDef: PfContainer,
  pub int64Def: PfContainer,
  pub uint64Def: PfContainer,
  pub constDef: PfContainer,
  pub functionDef: PfContainer,
  pub gl_WorkGroupID_x: PfContainer,
  pub gl_WorkGroupID_y: PfContainer,
  pub gl_WorkGroupID_z: PfContainer,
  pub workGroupShiftX: PfContainer,
  pub workGroupShiftY: PfContainer,
  pub workGroupShiftZ: PfContainer,
  pub shiftX: PfContainer,
  pub shiftY: PfContainer,
  pub shiftZ: PfContainer,
  pub useDisableThreads: ::std::os::raw::c_int,
  pub disableThreads: PfContainer,
  pub tempReg: PfContainer,
  pub coordinate: PfContainer,
  pub batchID: PfContainer,
  pub stageInvocationID: PfContainer,
  pub blockInvocationID: PfContainer,
  pub temp: PfContainer,
  pub temp2: PfContainer,
  pub tempInt: PfContainer,
  pub tempInt2: PfContainer,
  pub tempFloat: PfContainer,
  pub tempQuad: PfContainer,
  pub tempQuad2: PfContainer,
  pub tempQuad3: PfContainer,
  pub tempIntQuad: PfContainer,
  pub w: PfContainer,
  pub iw: PfContainer,
  pub angle: PfContainer,
  pub mult: PfContainer,
  pub x0: [PfContainer; 33usize],
  pub locID: [PfContainer; 33usize],
  pub code0: *mut ::std::os::raw::c_char,
  pub tempStr: *mut ::std::os::raw::c_char,
  pub tempLen: i64,
  pub currentLen: i64,
  pub currentTempLen: i64,
  pub maxCodeLength: i64,
  pub maxTempLength: i64,
  pub dataTypeSize: ::std::os::raw::c_int,
  pub LFending: PfContainer,
  pub complexDataType: ::std::os::raw::c_int,
  pub floatTypeCode: ::std::os::raw::c_int,
  pub floatTypeKernelMemoryCode: ::std::os::raw::c_int,
  pub floatTypeInputMemoryCode: ::std::os::raw::c_int,
  pub floatTypeOutputMemoryCode: ::std::os::raw::c_int,
  pub vecTypeCode: ::std::os::raw::c_int,
  pub vecTypeKernelMemoryCode: ::std::os::raw::c_int,
  pub vecTypeInputMemoryCode: ::std::os::raw::c_int,
  pub vecTypeOutputMemoryCode: ::std::os::raw::c_int,
  pub intTypeCode: ::std::os::raw::c_int,
  pub uintTypeCode: ::std::os::raw::c_int,
  pub uintType32Code: ::std::os::raw::c_int,
  pub inputMemoryCode: ::std::os::raw::c_int,
  pub outputMemoryCode: ::std::os::raw::c_int,
  pub inputsStruct: PfContainer,
  pub outputsStruct: PfContainer,
  pub kernelStruct: PfContainer,
  pub sdataStruct: PfContainer,
  pub LUTStruct: PfContainer,
  pub BluesteinStruct: PfContainer,
  pub BluesteinConvolutionKernelStruct: PfContainer,
  pub g_powStruct: PfContainer,
  pub oldLocale: PfContainer,
  pub id: i64,
}
#[test]
fn bindgen_test_layout_VkFFTSpecializationConstantsLayout() {
  const UNINIT: ::std::mem::MaybeUninit<VkFFTSpecializationConstantsLayout> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<VkFFTSpecializationConstantsLayout>(),
    10448usize,
    concat!("Size of: ", stringify!(VkFFTSpecializationConstantsLayout))
  );
  assert_eq!(
    ::std::mem::align_of::<VkFFTSpecializationConstantsLayout>(),
    8usize,
    concat!(
      "Alignment of ",
      stringify!(VkFFTSpecializationConstantsLayout)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).res) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(res)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).double_PI) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(double_PI)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).numFFTdims) as usize - ptr as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(numFFTdims)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(size)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).localSize) as usize - ptr as usize },
    152usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(localSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).numSubgroups) as usize - ptr as usize },
    248usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(numSubgroups)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).sourceFFTSize) as usize - ptr as usize },
    256usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(sourceFFTSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).fftDim) as usize - ptr as usize },
    288usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(fftDim)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).precision) as usize - ptr as usize },
    320usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(precision)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).inverse) as usize - ptr as usize },
    324usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(inverse)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).actualInverse) as usize - ptr as usize },
    328usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(actualInverse)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).inverseBluestein) as usize - ptr as usize },
    332usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(inverseBluestein)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).zeropad) as usize - ptr as usize },
    336usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(zeropad)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).zeropadBluestein) as usize - ptr as usize },
    344usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(zeropadBluestein)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).axis_id) as usize - ptr as usize },
    352usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(axis_id)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).axis_upload_id) as usize - ptr as usize },
    356usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(axis_upload_id)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).numAxisUploads) as usize - ptr as usize },
    360usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(numAxisUploads)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).registers_per_thread) as usize - ptr as usize },
    364usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(registers_per_thread)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).registers_per_thread_per_radix) as usize - ptr as usize },
    368usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(registers_per_thread_per_radix)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).min_registers_per_thread) as usize - ptr as usize },
    500usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(min_registers_per_thread)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).maxNonPow2Radix) as usize - ptr as usize },
    504usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(maxNonPow2Radix)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).usedLocRegs) as usize - ptr as usize },
    508usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(usedLocRegs)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).readToRegisters) as usize - ptr as usize },
    512usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(readToRegisters)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).writeFromRegisters) as usize - ptr as usize },
    516usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(writeFromRegisters)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).LUT) as usize - ptr as usize },
    520usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(LUT)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).LUT_4step) as usize - ptr as usize },
    524usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(LUT_4step)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).raderUintLUT) as usize - ptr as usize },
    528usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(raderUintLUT)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).useCoalescedLUTUploadToSM) as usize - ptr as usize },
    532usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(useCoalescedLUTUploadToSM)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).useBluesteinFFT) as usize - ptr as usize },
    536usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(useBluesteinFFT)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).reverseBluesteinMultiUpload) as usize - ptr as usize },
    540usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(reverseBluesteinMultiUpload)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).BluesteinConvolutionStep) as usize - ptr as usize },
    544usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(BluesteinConvolutionStep)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).BluesteinPreMultiplication) as usize - ptr as usize },
    548usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(BluesteinPreMultiplication)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).BluesteinPostMultiplication) as usize - ptr as usize },
    552usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(BluesteinPostMultiplication)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).startDCT3LUT) as usize - ptr as usize },
    560usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(startDCT3LUT)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).startDCT4LUT) as usize - ptr as usize },
    592usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(startDCT4LUT)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).performR2C) as usize - ptr as usize },
    624usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(performR2C)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).performR2CmultiUpload) as usize - ptr as usize },
    628usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(performR2CmultiUpload)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).performR2RmultiUpload) as usize - ptr as usize },
    632usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(performR2RmultiUpload)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).performDCT) as usize - ptr as usize },
    636usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(performDCT)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).performDST) as usize - ptr as usize },
    640usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(performDST)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).performBandwidthBoost) as usize - ptr as usize },
    644usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(performBandwidthBoost)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).frequencyZeropadding) as usize - ptr as usize },
    648usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(frequencyZeropadding)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).performZeropaddingFull) as usize - ptr as usize },
    652usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(performZeropaddingFull)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).performZeropaddingInput) as usize - ptr as usize },
    668usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(performZeropaddingInput)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).performZeropaddingOutput) as usize - ptr as usize },
    684usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(performZeropaddingOutput)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).fft_zeropad_left_full) as usize - ptr as usize },
    704usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(fft_zeropad_left_full)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).fft_zeropad_left_read) as usize - ptr as usize },
    832usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(fft_zeropad_left_read)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).fft_zeropad_left_write) as usize - ptr as usize },
    960usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(fft_zeropad_left_write)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).fft_zeropad_right_full) as usize - ptr as usize },
    1088usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(fft_zeropad_right_full)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).fft_zeropad_right_read) as usize - ptr as usize },
    1216usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(fft_zeropad_right_read)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).fft_zeropad_right_write) as usize - ptr as usize },
    1344usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(fft_zeropad_right_write)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).fft_zeropad_Bluestein_left_read) as usize - ptr as usize },
    1472usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(fft_zeropad_Bluestein_left_read)
    )
  );
  assert_eq!(
    unsafe {
      ::std::ptr::addr_of!((*ptr).fft_zeropad_Bluestein_left_write) as usize - ptr as usize
    },
    1600usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(fft_zeropad_Bluestein_left_write)
    )
  );
  assert_eq!(
    unsafe {
      ::std::ptr::addr_of!((*ptr).fft_zeropad_Bluestein_right_read) as usize - ptr as usize
    },
    1728usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(fft_zeropad_Bluestein_right_read)
    )
  );
  assert_eq!(
    unsafe {
      ::std::ptr::addr_of!((*ptr).fft_zeropad_Bluestein_right_write) as usize - ptr as usize
    },
    1856usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(fft_zeropad_Bluestein_right_write)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).inputStride) as usize - ptr as usize },
    1984usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(inputStride)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).outputStride) as usize - ptr as usize },
    2176usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(outputStride)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).fft_dim_full) as usize - ptr as usize },
    2368usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(fft_dim_full)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).stageStartSize) as usize - ptr as usize },
    2400usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(stageStartSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).firstStageStartSize) as usize - ptr as usize },
    2432usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(firstStageStartSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).fft_dim_x) as usize - ptr as usize },
    2464usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(fft_dim_x)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).dispatchZactualFFTSize) as usize - ptr as usize },
    2496usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(dispatchZactualFFTSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).numStages) as usize - ptr as usize },
    2528usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(numStages)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).stageRadix) as usize - ptr as usize },
    2532usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(stageRadix)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).inputOffset) as usize - ptr as usize },
    2664usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(inputOffset)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).kernelOffset) as usize - ptr as usize },
    2696usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(kernelOffset)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).outputOffset) as usize - ptr as usize },
    2728usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(outputOffset)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).reorderFourStep) as usize - ptr as usize },
    2760usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(reorderFourStep)
    )
  );
  assert_eq!(
    unsafe {
      ::std::ptr::addr_of!((*ptr).storeSharedComplexComponentsSeparately) as usize - ptr as usize
    },
    2764usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(storeSharedComplexComponentsSeparately)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).pushConstantsStructSize) as usize - ptr as usize },
    2768usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(pushConstantsStructSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).performWorkGroupShift) as usize - ptr as usize },
    2772usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(performWorkGroupShift)
    )
  );
  assert_eq!(
    unsafe {
      ::std::ptr::addr_of!((*ptr).performPostCompilationInputOffset) as usize - ptr as usize
    },
    2788usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(performPostCompilationInputOffset)
    )
  );
  assert_eq!(
    unsafe {
      ::std::ptr::addr_of!((*ptr).performPostCompilationOutputOffset) as usize - ptr as usize
    },
    2792usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(performPostCompilationOutputOffset)
    )
  );
  assert_eq!(
    unsafe {
      ::std::ptr::addr_of!((*ptr).performPostCompilationKernelOffset) as usize - ptr as usize
    },
    2796usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(performPostCompilationKernelOffset)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).inputBufferBlockNum) as usize - ptr as usize },
    2800usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(inputBufferBlockNum)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).inputBufferBlockSize) as usize - ptr as usize },
    2808usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(inputBufferBlockSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).outputBufferBlockNum) as usize - ptr as usize },
    2816usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(outputBufferBlockNum)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).outputBufferBlockSize) as usize - ptr as usize },
    2824usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(outputBufferBlockSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).kernelBlockNum) as usize - ptr as usize },
    2832usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(kernelBlockNum)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).kernelBlockSize) as usize - ptr as usize },
    2840usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(kernelBlockSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).numCoordinates) as usize - ptr as usize },
    2848usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(numCoordinates)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).matrixConvolution) as usize - ptr as usize },
    2852usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(matrixConvolution)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).numBatches) as usize - ptr as usize },
    2856usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(numBatches)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).numKernels) as usize - ptr as usize },
    2888usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(numKernels)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).conjugateConvolution) as usize - ptr as usize },
    2920usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(conjugateConvolution)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).crossPowerSpectrumNormalization) as usize - ptr as usize },
    2924usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(crossPowerSpectrumNormalization)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).usedSharedMemory) as usize - ptr as usize },
    2928usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(usedSharedMemory)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).sharedMemSize) as usize - ptr as usize },
    2960usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(sharedMemSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).sharedMemSizePow2) as usize - ptr as usize },
    2964usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(sharedMemSizePow2)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).normalize) as usize - ptr as usize },
    2968usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(normalize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).complexSize) as usize - ptr as usize },
    2972usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(complexSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).inputNumberByteSize) as usize - ptr as usize },
    2976usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(inputNumberByteSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).outputNumberByteSize) as usize - ptr as usize },
    2980usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(outputNumberByteSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).kernelNumberByteSize) as usize - ptr as usize },
    2984usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(kernelNumberByteSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).maxStageSumLUT) as usize - ptr as usize },
    2988usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(maxStageSumLUT)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).swapComputeWorkGroupID) as usize - ptr as usize },
    2992usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(swapComputeWorkGroupID)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).convolutionStep) as usize - ptr as usize },
    2996usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(convolutionStep)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).symmetricKernel) as usize - ptr as usize },
    3000usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(symmetricKernel)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).supportAxis) as usize - ptr as usize },
    3004usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(supportAxis)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).cacheShuffle) as usize - ptr as usize },
    3008usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(cacheShuffle)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).registerBoost) as usize - ptr as usize },
    3012usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(registerBoost)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).warpSize) as usize - ptr as usize },
    3016usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(warpSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).numSharedBanks) as usize - ptr as usize },
    3020usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(numSharedBanks)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).resolveBankConflictFirstStages) as usize - ptr as usize },
    3024usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(resolveBankConflictFirstStages)
    )
  );
  assert_eq!(
    unsafe {
      ::std::ptr::addr_of!((*ptr).sharedStrideBankConflictFirstStages) as usize - ptr as usize
    },
    3032usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(sharedStrideBankConflictFirstStages)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).sharedStrideReadWriteConflict) as usize - ptr as usize },
    3064usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(sharedStrideReadWriteConflict)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).sharedStrideRaderFFT) as usize - ptr as usize },
    3096usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(sharedStrideRaderFFT)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).sharedShiftRaderFFT) as usize - ptr as usize },
    3128usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(sharedShiftRaderFFT)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).maxSharedStride) as usize - ptr as usize },
    3160usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(maxSharedStride)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).maxSingleSizeStrided) as usize - ptr as usize },
    3192usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(maxSingleSizeStrided)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).axisSwapped) as usize - ptr as usize },
    3224usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(axisSwapped)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).stridedSharedLayout) as usize - ptr as usize },
    3228usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(stridedSharedLayout)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).mergeSequencesR2C) as usize - ptr as usize },
    3232usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(mergeSequencesR2C)
    )
  );
  assert_eq!(
    unsafe {
      ::std::ptr::addr_of!((*ptr).forceCallbackVersionRealTransforms) as usize - ptr as usize
    },
    3236usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(forceCallbackVersionRealTransforms)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).numBuffersBound) as usize - ptr as usize },
    3240usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(numBuffersBound)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).convolutionBindingID) as usize - ptr as usize },
    3280usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(convolutionBindingID)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).LUTBindingID) as usize - ptr as usize },
    3284usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(LUTBindingID)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).BluesteinConvolutionBindingID) as usize - ptr as usize },
    3288usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(BluesteinConvolutionBindingID)
    )
  );
  assert_eq!(
    unsafe {
      ::std::ptr::addr_of!((*ptr).BluesteinMultiplicationBindingID) as usize - ptr as usize
    },
    3292usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(BluesteinMultiplicationBindingID)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).useRader) as usize - ptr as usize },
    3296usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(useRader)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).numRaderPrimes) as usize - ptr as usize },
    3300usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(numRaderPrimes)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).minRaderFFTThreadNum) as usize - ptr as usize },
    3304usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(minRaderFFTThreadNum)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).raderContainer) as usize - ptr as usize },
    3312usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(raderContainer)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).currentRaderContainer) as usize - ptr as usize },
    3320usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(currentRaderContainer)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).RaderUintLUTBindingID) as usize - ptr as usize },
    3328usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(RaderUintLUTBindingID)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).useRaderMult) as usize - ptr as usize },
    3332usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(useRaderMult)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).additionalRaderSharedSize) as usize - ptr as usize },
    3336usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(additionalRaderSharedSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).RaderKernelOffsetShared) as usize - ptr as usize },
    3368usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(RaderKernelOffsetShared)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).RaderKernelOffsetLUT) as usize - ptr as usize },
    4424usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(RaderKernelOffsetLUT)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).rader_generator) as usize - ptr as usize },
    5480usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(rader_generator)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).fixMinRaderPrimeMult) as usize - ptr as usize },
    5612usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(fixMinRaderPrimeMult)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).fixMaxRaderPrimeMult) as usize - ptr as usize },
    5616usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(fixMaxRaderPrimeMult)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).fixMinRaderPrimeFFT) as usize - ptr as usize },
    5620usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(fixMinRaderPrimeFFT)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).fixMaxRaderPrimeFFT) as usize - ptr as usize },
    5624usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(fixMaxRaderPrimeFFT)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).inline_rader_g_pow) as usize - ptr as usize },
    5628usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(inline_rader_g_pow)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).inline_rader_kernel) as usize - ptr as usize },
    5632usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(inline_rader_kernel)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).raderRegisters) as usize - ptr as usize },
    5636usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(raderRegisters)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).rader_min_registers) as usize - ptr as usize },
    5640usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(rader_min_registers)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).useRaderFFT) as usize - ptr as usize },
    5644usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(useRaderFFT)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).performOffsetUpdate) as usize - ptr as usize },
    5648usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(performOffsetUpdate)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).performBufferSetUpdate) as usize - ptr as usize },
    5652usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(performBufferSetUpdate)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).useUint64) as usize - ptr as usize },
    5656usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(useUint64)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).disableSetLocale) as usize - ptr as usize },
    5660usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(disableSetLocale)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).regIDs) as usize - ptr as usize },
    5664usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(regIDs)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).regIDs_copy) as usize - ptr as usize },
    5672usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(regIDs_copy)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).temp_conv) as usize - ptr as usize },
    5680usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(temp_conv)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).disableThreadsStart) as usize - ptr as usize },
    5688usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(disableThreadsStart)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).disableThreadsEnd) as usize - ptr as usize },
    5696usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(disableThreadsEnd)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).sdataID) as usize - ptr as usize },
    5704usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(sdataID)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).inoutID) as usize - ptr as usize },
    5736usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(inoutID)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).inoutID2) as usize - ptr as usize },
    5768usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(inoutID2)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).inoutID_x) as usize - ptr as usize },
    5800usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(inoutID_x)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).inoutID_y) as usize - ptr as usize },
    5832usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(inoutID_y)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).combinedID) as usize - ptr as usize },
    5864usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(combinedID)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).LUTId) as usize - ptr as usize },
    5896usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(LUTId)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).raderIDx) as usize - ptr as usize },
    5928usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(raderIDx)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).raderIDx2) as usize - ptr as usize },
    5960usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(raderIDx2)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).offsetImaginaryShared) as usize - ptr as usize },
    5992usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(offsetImaginaryShared)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).gl_LocalInvocationID_x) as usize - ptr as usize },
    6024usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(gl_LocalInvocationID_x)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).gl_LocalInvocationID_y) as usize - ptr as usize },
    6056usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(gl_LocalInvocationID_y)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).gl_LocalInvocationID_z) as usize - ptr as usize },
    6088usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(gl_LocalInvocationID_z)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).gl_GlobalInvocationID_x) as usize - ptr as usize },
    6120usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(gl_GlobalInvocationID_x)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).gl_GlobalInvocationID_y) as usize - ptr as usize },
    6152usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(gl_GlobalInvocationID_y)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).gl_GlobalInvocationID_z) as usize - ptr as usize },
    6184usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(gl_GlobalInvocationID_z)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).gl_SubgroupInvocationID) as usize - ptr as usize },
    6216usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(gl_SubgroupInvocationID)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).gl_SubgroupID) as usize - ptr as usize },
    6248usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(gl_SubgroupID)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).tshuffle) as usize - ptr as usize },
    6280usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(tshuffle)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).sharedStride) as usize - ptr as usize },
    6312usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(sharedStride)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).gl_WorkGroupSize_x) as usize - ptr as usize },
    6344usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(gl_WorkGroupSize_x)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).gl_WorkGroupSize_y) as usize - ptr as usize },
    6376usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(gl_WorkGroupSize_y)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).gl_WorkGroupSize_z) as usize - ptr as usize },
    6408usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(gl_WorkGroupSize_z)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).halfDef) as usize - ptr as usize },
    6440usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(halfDef)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).floatDef) as usize - ptr as usize },
    6472usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(floatDef)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).doubleDef) as usize - ptr as usize },
    6504usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(doubleDef)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).quadDef) as usize - ptr as usize },
    6536usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(quadDef)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).half2Def) as usize - ptr as usize },
    6568usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(half2Def)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).float2Def) as usize - ptr as usize },
    6600usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(float2Def)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).double2Def) as usize - ptr as usize },
    6632usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(double2Def)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).quad2Def) as usize - ptr as usize },
    6664usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(quad2Def)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).halfLiteral) as usize - ptr as usize },
    6696usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(halfLiteral)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).floatLiteral) as usize - ptr as usize },
    6728usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(floatLiteral)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).doubleLiteral) as usize - ptr as usize },
    6760usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(doubleLiteral)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).intDef) as usize - ptr as usize },
    6792usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(intDef)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).uintDef) as usize - ptr as usize },
    6824usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(uintDef)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).int64Def) as usize - ptr as usize },
    6856usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(int64Def)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).uint64Def) as usize - ptr as usize },
    6888usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(uint64Def)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).constDef) as usize - ptr as usize },
    6920usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(constDef)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).functionDef) as usize - ptr as usize },
    6952usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(functionDef)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).gl_WorkGroupID_x) as usize - ptr as usize },
    6984usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(gl_WorkGroupID_x)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).gl_WorkGroupID_y) as usize - ptr as usize },
    7016usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(gl_WorkGroupID_y)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).gl_WorkGroupID_z) as usize - ptr as usize },
    7048usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(gl_WorkGroupID_z)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).workGroupShiftX) as usize - ptr as usize },
    7080usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(workGroupShiftX)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).workGroupShiftY) as usize - ptr as usize },
    7112usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(workGroupShiftY)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).workGroupShiftZ) as usize - ptr as usize },
    7144usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(workGroupShiftZ)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).shiftX) as usize - ptr as usize },
    7176usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(shiftX)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).shiftY) as usize - ptr as usize },
    7208usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(shiftY)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).shiftZ) as usize - ptr as usize },
    7240usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(shiftZ)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).useDisableThreads) as usize - ptr as usize },
    7272usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(useDisableThreads)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).disableThreads) as usize - ptr as usize },
    7280usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(disableThreads)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).tempReg) as usize - ptr as usize },
    7312usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(tempReg)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).coordinate) as usize - ptr as usize },
    7344usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(coordinate)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).batchID) as usize - ptr as usize },
    7376usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(batchID)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).stageInvocationID) as usize - ptr as usize },
    7408usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(stageInvocationID)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).blockInvocationID) as usize - ptr as usize },
    7440usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(blockInvocationID)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).temp) as usize - ptr as usize },
    7472usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(temp)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).temp2) as usize - ptr as usize },
    7504usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(temp2)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).tempInt) as usize - ptr as usize },
    7536usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(tempInt)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).tempInt2) as usize - ptr as usize },
    7568usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(tempInt2)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).tempFloat) as usize - ptr as usize },
    7600usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(tempFloat)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).tempQuad) as usize - ptr as usize },
    7632usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(tempQuad)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).tempQuad2) as usize - ptr as usize },
    7664usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(tempQuad2)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).tempQuad3) as usize - ptr as usize },
    7696usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(tempQuad3)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).tempIntQuad) as usize - ptr as usize },
    7728usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(tempIntQuad)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
    7760usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(w)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).iw) as usize - ptr as usize },
    7792usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(iw)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).angle) as usize - ptr as usize },
    7824usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(angle)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).mult) as usize - ptr as usize },
    7856usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(mult)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).x0) as usize - ptr as usize },
    7888usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(x0)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).locID) as usize - ptr as usize },
    8944usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(locID)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).code0) as usize - ptr as usize },
    10000usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(code0)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).tempStr) as usize - ptr as usize },
    10008usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(tempStr)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).tempLen) as usize - ptr as usize },
    10016usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(tempLen)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).currentLen) as usize - ptr as usize },
    10024usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(currentLen)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).currentTempLen) as usize - ptr as usize },
    10032usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(currentTempLen)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).maxCodeLength) as usize - ptr as usize },
    10040usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(maxCodeLength)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).maxTempLength) as usize - ptr as usize },
    10048usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(maxTempLength)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).dataTypeSize) as usize - ptr as usize },
    10056usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(dataTypeSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).LFending) as usize - ptr as usize },
    10064usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(LFending)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).complexDataType) as usize - ptr as usize },
    10096usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(complexDataType)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).floatTypeCode) as usize - ptr as usize },
    10100usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(floatTypeCode)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).floatTypeKernelMemoryCode) as usize - ptr as usize },
    10104usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(floatTypeKernelMemoryCode)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).floatTypeInputMemoryCode) as usize - ptr as usize },
    10108usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(floatTypeInputMemoryCode)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).floatTypeOutputMemoryCode) as usize - ptr as usize },
    10112usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(floatTypeOutputMemoryCode)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).vecTypeCode) as usize - ptr as usize },
    10116usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(vecTypeCode)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).vecTypeKernelMemoryCode) as usize - ptr as usize },
    10120usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(vecTypeKernelMemoryCode)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).vecTypeInputMemoryCode) as usize - ptr as usize },
    10124usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(vecTypeInputMemoryCode)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).vecTypeOutputMemoryCode) as usize - ptr as usize },
    10128usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(vecTypeOutputMemoryCode)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).intTypeCode) as usize - ptr as usize },
    10132usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(intTypeCode)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).uintTypeCode) as usize - ptr as usize },
    10136usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(uintTypeCode)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).uintType32Code) as usize - ptr as usize },
    10140usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(uintType32Code)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).inputMemoryCode) as usize - ptr as usize },
    10144usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(inputMemoryCode)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).outputMemoryCode) as usize - ptr as usize },
    10148usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(outputMemoryCode)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).inputsStruct) as usize - ptr as usize },
    10152usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(inputsStruct)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).outputsStruct) as usize - ptr as usize },
    10184usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(outputsStruct)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).kernelStruct) as usize - ptr as usize },
    10216usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(kernelStruct)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).sdataStruct) as usize - ptr as usize },
    10248usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(sdataStruct)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).LUTStruct) as usize - ptr as usize },
    10280usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(LUTStruct)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).BluesteinStruct) as usize - ptr as usize },
    10312usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(BluesteinStruct)
    )
  );
  assert_eq!(
    unsafe {
      ::std::ptr::addr_of!((*ptr).BluesteinConvolutionKernelStruct) as usize - ptr as usize
    },
    10344usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(BluesteinConvolutionKernelStruct)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).g_powStruct) as usize - ptr as usize },
    10376usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(g_powStruct)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).oldLocale) as usize - ptr as usize },
    10408usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(oldLocale)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
    10440usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTSpecializationConstantsLayout),
      "::",
      stringify!(id)
    )
  );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkFFTPushConstantsLayout {
  pub data: [::std::os::raw::c_char; 128usize],
  pub performWorkGroupShift: [u64; 4usize],
  pub workGroupShift: [u64; 4usize],
  pub performPostCompilationInputOffset: u64,
  pub inputOffset: u64,
  pub performPostCompilationOutputOffset: u64,
  pub outputOffset: u64,
  pub performPostCompilationKernelOffset: u64,
  pub kernelOffset: u64,
  pub structSize: u64,
}
#[test]
fn bindgen_test_layout_VkFFTPushConstantsLayout() {
  const UNINIT: ::std::mem::MaybeUninit<VkFFTPushConstantsLayout> =
    ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<VkFFTPushConstantsLayout>(),
    248usize,
    concat!("Size of: ", stringify!(VkFFTPushConstantsLayout))
  );
  assert_eq!(
    ::std::mem::align_of::<VkFFTPushConstantsLayout>(),
    8usize,
    concat!("Alignment of ", stringify!(VkFFTPushConstantsLayout))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTPushConstantsLayout),
      "::",
      stringify!(data)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).performWorkGroupShift) as usize - ptr as usize },
    128usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTPushConstantsLayout),
      "::",
      stringify!(performWorkGroupShift)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).workGroupShift) as usize - ptr as usize },
    160usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTPushConstantsLayout),
      "::",
      stringify!(workGroupShift)
    )
  );
  assert_eq!(
    unsafe {
      ::std::ptr::addr_of!((*ptr).performPostCompilationInputOffset) as usize - ptr as usize
    },
    192usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTPushConstantsLayout),
      "::",
      stringify!(performPostCompilationInputOffset)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).inputOffset) as usize - ptr as usize },
    200usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTPushConstantsLayout),
      "::",
      stringify!(inputOffset)
    )
  );
  assert_eq!(
    unsafe {
      ::std::ptr::addr_of!((*ptr).performPostCompilationOutputOffset) as usize - ptr as usize
    },
    208usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTPushConstantsLayout),
      "::",
      stringify!(performPostCompilationOutputOffset)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).outputOffset) as usize - ptr as usize },
    216usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTPushConstantsLayout),
      "::",
      stringify!(outputOffset)
    )
  );
  assert_eq!(
    unsafe {
      ::std::ptr::addr_of!((*ptr).performPostCompilationKernelOffset) as usize - ptr as usize
    },
    224usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTPushConstantsLayout),
      "::",
      stringify!(performPostCompilationKernelOffset)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).kernelOffset) as usize - ptr as usize },
    232usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTPushConstantsLayout),
      "::",
      stringify!(kernelOffset)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).structSize) as usize - ptr as usize },
    240usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTPushConstantsLayout),
      "::",
      stringify!(structSize)
    )
  );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkFFTAxis {
  pub numBindings: u64,
  pub axisBlock: [u64; 4usize],
  pub groupedBatch: u64,
  pub specializationConstants: VkFFTSpecializationConstantsLayout,
  pub pushConstants: VkFFTPushConstantsLayout,
  pub updatePushConstants: u64,
  pub VkFFTFunctionName: [::std::os::raw::c_char; 50usize],
  pub inputBuffer: *mut VkBuffer,
  pub outputBuffer: *mut VkBuffer,
  pub descriptorPool: VkDescriptorPool,
  pub descriptorSetLayout: VkDescriptorSetLayout,
  pub descriptorSet: VkDescriptorSet,
  pub pipelineLayout: VkPipelineLayout,
  pub pipeline: VkPipeline,
  pub bufferLUTDeviceMemory: VkDeviceMemory,
  pub bufferLUT: VkBuffer,
  pub bufferRaderUintLUTDeviceMemory: VkDeviceMemory,
  pub bufferRaderUintLUT: VkBuffer,
  pub bufferBluesteinDeviceMemory: *mut VkDeviceMemory,
  pub bufferBluesteinFFTDeviceMemory: *mut VkDeviceMemory,
  pub bufferBluestein: *mut VkBuffer,
  pub bufferBluesteinFFT: *mut VkBuffer,
  pub binary: *mut ::std::os::raw::c_void,
  pub binarySize: u64,
  pub bufferLUTSize: u64,
  pub bufferRaderUintLUTSize: u64,
  pub referenceLUT: u64,
}
#[test]
fn bindgen_test_layout_VkFFTAxis() {
  const UNINIT: ::std::mem::MaybeUninit<VkFFTAxis> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<VkFFTAxis>(),
    10968usize,
    concat!("Size of: ", stringify!(VkFFTAxis))
  );
  assert_eq!(
    ::std::mem::align_of::<VkFFTAxis>(),
    8usize,
    concat!("Alignment of ", stringify!(VkFFTAxis))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).numBindings) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTAxis),
      "::",
      stringify!(numBindings)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).axisBlock) as usize - ptr as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTAxis),
      "::",
      stringify!(axisBlock)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).groupedBatch) as usize - ptr as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTAxis),
      "::",
      stringify!(groupedBatch)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).specializationConstants) as usize - ptr as usize },
    48usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTAxis),
      "::",
      stringify!(specializationConstants)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).pushConstants) as usize - ptr as usize },
    10496usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTAxis),
      "::",
      stringify!(pushConstants)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).updatePushConstants) as usize - ptr as usize },
    10744usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTAxis),
      "::",
      stringify!(updatePushConstants)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).VkFFTFunctionName) as usize - ptr as usize },
    10752usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTAxis),
      "::",
      stringify!(VkFFTFunctionName)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).inputBuffer) as usize - ptr as usize },
    10808usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTAxis),
      "::",
      stringify!(inputBuffer)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).outputBuffer) as usize - ptr as usize },
    10816usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTAxis),
      "::",
      stringify!(outputBuffer)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).descriptorPool) as usize - ptr as usize },
    10824usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTAxis),
      "::",
      stringify!(descriptorPool)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).descriptorSetLayout) as usize - ptr as usize },
    10832usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTAxis),
      "::",
      stringify!(descriptorSetLayout)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).descriptorSet) as usize - ptr as usize },
    10840usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTAxis),
      "::",
      stringify!(descriptorSet)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).pipelineLayout) as usize - ptr as usize },
    10848usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTAxis),
      "::",
      stringify!(pipelineLayout)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).pipeline) as usize - ptr as usize },
    10856usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTAxis),
      "::",
      stringify!(pipeline)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).bufferLUTDeviceMemory) as usize - ptr as usize },
    10864usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTAxis),
      "::",
      stringify!(bufferLUTDeviceMemory)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).bufferLUT) as usize - ptr as usize },
    10872usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTAxis),
      "::",
      stringify!(bufferLUT)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).bufferRaderUintLUTDeviceMemory) as usize - ptr as usize },
    10880usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTAxis),
      "::",
      stringify!(bufferRaderUintLUTDeviceMemory)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).bufferRaderUintLUT) as usize - ptr as usize },
    10888usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTAxis),
      "::",
      stringify!(bufferRaderUintLUT)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).bufferBluesteinDeviceMemory) as usize - ptr as usize },
    10896usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTAxis),
      "::",
      stringify!(bufferBluesteinDeviceMemory)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).bufferBluesteinFFTDeviceMemory) as usize - ptr as usize },
    10904usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTAxis),
      "::",
      stringify!(bufferBluesteinFFTDeviceMemory)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).bufferBluestein) as usize - ptr as usize },
    10912usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTAxis),
      "::",
      stringify!(bufferBluestein)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).bufferBluesteinFFT) as usize - ptr as usize },
    10920usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTAxis),
      "::",
      stringify!(bufferBluesteinFFT)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).binary) as usize - ptr as usize },
    10928usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTAxis),
      "::",
      stringify!(binary)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).binarySize) as usize - ptr as usize },
    10936usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTAxis),
      "::",
      stringify!(binarySize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).bufferLUTSize) as usize - ptr as usize },
    10944usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTAxis),
      "::",
      stringify!(bufferLUTSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).bufferRaderUintLUTSize) as usize - ptr as usize },
    10952usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTAxis),
      "::",
      stringify!(bufferRaderUintLUTSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).referenceLUT) as usize - ptr as usize },
    10960usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTAxis),
      "::",
      stringify!(referenceLUT)
    )
  );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkFFTPlan {
  pub actualFFTSizePerAxis: [[u64; 4usize]; 4usize],
  pub numAxisUploads: [u64; 4usize],
  pub axisSplit: [[u64; 4usize]; 4usize],
  pub axes: [[VkFFTAxis; 4usize]; 4usize],
  pub bigSequenceEvenR2C: u64,
  pub actualPerformR2CPerAxis: [u64; 4usize],
  pub R2Cdecomposition: VkFFTAxis,
  pub inverseBluesteinAxes: [[VkFFTAxis; 4usize]; 4usize],
}
#[test]
fn bindgen_test_layout_VkFFTPlan() {
  const UNINIT: ::std::mem::MaybeUninit<VkFFTPlan> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<VkFFTPlan>(),
    362272usize,
    concat!("Size of: ", stringify!(VkFFTPlan))
  );
  assert_eq!(
    ::std::mem::align_of::<VkFFTPlan>(),
    8usize,
    concat!("Alignment of ", stringify!(VkFFTPlan))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).actualFFTSizePerAxis) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTPlan),
      "::",
      stringify!(actualFFTSizePerAxis)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).numAxisUploads) as usize - ptr as usize },
    128usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTPlan),
      "::",
      stringify!(numAxisUploads)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).axisSplit) as usize - ptr as usize },
    160usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTPlan),
      "::",
      stringify!(axisSplit)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).axes) as usize - ptr as usize },
    288usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTPlan),
      "::",
      stringify!(axes)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).bigSequenceEvenR2C) as usize - ptr as usize },
    175776usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTPlan),
      "::",
      stringify!(bigSequenceEvenR2C)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).actualPerformR2CPerAxis) as usize - ptr as usize },
    175784usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTPlan),
      "::",
      stringify!(actualPerformR2CPerAxis)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).R2Cdecomposition) as usize - ptr as usize },
    175816usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTPlan),
      "::",
      stringify!(R2Cdecomposition)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).inverseBluesteinAxes) as usize - ptr as usize },
    186784usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTPlan),
      "::",
      stringify!(inverseBluesteinAxes)
    )
  );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkFFTApplication {
  pub configuration: VkFFTConfiguration,
  pub localFFTPlan: *mut VkFFTPlan,
  pub localFFTPlan_inverse: *mut VkFFTPlan,
  pub actualNumBatches: u64,
  pub firstAxis: u64,
  pub lastAxis: u64,
  pub useBluesteinFFT: [u64; 4usize],
  pub bufferRaderUintLUTDeviceMemory: [[VkDeviceMemory; 4usize]; 4usize],
  pub bufferRaderUintLUT: [[VkBuffer; 4usize]; 4usize],
  pub bufferBluesteinDeviceMemory: [VkDeviceMemory; 4usize],
  pub bufferBluesteinFFTDeviceMemory: [VkDeviceMemory; 4usize],
  pub bufferBluesteinIFFTDeviceMemory: [VkDeviceMemory; 4usize],
  pub bufferBluestein: [VkBuffer; 4usize],
  pub bufferBluesteinFFT: [VkBuffer; 4usize],
  pub bufferBluesteinIFFT: [VkBuffer; 4usize],
  pub bufferRaderUintLUTSize: [[u64; 4usize]; 4usize],
  pub bufferBluesteinSize: [u64; 4usize],
  pub applicationBluesteinString: [*mut ::std::os::raw::c_void; 4usize],
  pub applicationBluesteinStringSize: [u64; 4usize],
  pub numRaderFFTPrimes: u64,
  pub rader_primes: [u64; 30usize],
  pub rader_buffer_size: [u64; 30usize],
  pub raderFFTkernel: [*mut ::std::os::raw::c_void; 30usize],
  pub applicationStringOffsetRader: u64,
  pub currentApplicationStringPos: u64,
  pub applicationStringSize: u64,
  pub saveApplicationString: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_VkFFTApplication() {
  const UNINIT: ::std::mem::MaybeUninit<VkFFTApplication> = ::std::mem::MaybeUninit::uninit();
  let ptr = UNINIT.as_ptr();
  assert_eq!(
    ::std::mem::size_of::<VkFFTApplication>(),
    2720usize,
    concat!("Size of: ", stringify!(VkFFTApplication))
  );
  assert_eq!(
    ::std::mem::align_of::<VkFFTApplication>(),
    8usize,
    concat!("Alignment of ", stringify!(VkFFTApplication))
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).configuration) as usize - ptr as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTApplication),
      "::",
      stringify!(configuration)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).localFFTPlan) as usize - ptr as usize },
    1216usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTApplication),
      "::",
      stringify!(localFFTPlan)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).localFFTPlan_inverse) as usize - ptr as usize },
    1224usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTApplication),
      "::",
      stringify!(localFFTPlan_inverse)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).actualNumBatches) as usize - ptr as usize },
    1232usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTApplication),
      "::",
      stringify!(actualNumBatches)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).firstAxis) as usize - ptr as usize },
    1240usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTApplication),
      "::",
      stringify!(firstAxis)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).lastAxis) as usize - ptr as usize },
    1248usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTApplication),
      "::",
      stringify!(lastAxis)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).useBluesteinFFT) as usize - ptr as usize },
    1256usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTApplication),
      "::",
      stringify!(useBluesteinFFT)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).bufferRaderUintLUTDeviceMemory) as usize - ptr as usize },
    1288usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTApplication),
      "::",
      stringify!(bufferRaderUintLUTDeviceMemory)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).bufferRaderUintLUT) as usize - ptr as usize },
    1416usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTApplication),
      "::",
      stringify!(bufferRaderUintLUT)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).bufferBluesteinDeviceMemory) as usize - ptr as usize },
    1544usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTApplication),
      "::",
      stringify!(bufferBluesteinDeviceMemory)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).bufferBluesteinFFTDeviceMemory) as usize - ptr as usize },
    1576usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTApplication),
      "::",
      stringify!(bufferBluesteinFFTDeviceMemory)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).bufferBluesteinIFFTDeviceMemory) as usize - ptr as usize },
    1608usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTApplication),
      "::",
      stringify!(bufferBluesteinIFFTDeviceMemory)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).bufferBluestein) as usize - ptr as usize },
    1640usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTApplication),
      "::",
      stringify!(bufferBluestein)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).bufferBluesteinFFT) as usize - ptr as usize },
    1672usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTApplication),
      "::",
      stringify!(bufferBluesteinFFT)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).bufferBluesteinIFFT) as usize - ptr as usize },
    1704usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTApplication),
      "::",
      stringify!(bufferBluesteinIFFT)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).bufferRaderUintLUTSize) as usize - ptr as usize },
    1736usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTApplication),
      "::",
      stringify!(bufferRaderUintLUTSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).bufferBluesteinSize) as usize - ptr as usize },
    1864usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTApplication),
      "::",
      stringify!(bufferBluesteinSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).applicationBluesteinString) as usize - ptr as usize },
    1896usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTApplication),
      "::",
      stringify!(applicationBluesteinString)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).applicationBluesteinStringSize) as usize - ptr as usize },
    1928usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTApplication),
      "::",
      stringify!(applicationBluesteinStringSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).numRaderFFTPrimes) as usize - ptr as usize },
    1960usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTApplication),
      "::",
      stringify!(numRaderFFTPrimes)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).rader_primes) as usize - ptr as usize },
    1968usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTApplication),
      "::",
      stringify!(rader_primes)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).rader_buffer_size) as usize - ptr as usize },
    2208usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTApplication),
      "::",
      stringify!(rader_buffer_size)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).raderFFTkernel) as usize - ptr as usize },
    2448usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTApplication),
      "::",
      stringify!(raderFFTkernel)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).applicationStringOffsetRader) as usize - ptr as usize },
    2688usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTApplication),
      "::",
      stringify!(applicationStringOffsetRader)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).currentApplicationStringPos) as usize - ptr as usize },
    2696usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTApplication),
      "::",
      stringify!(currentApplicationStringPos)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).applicationStringSize) as usize - ptr as usize },
    2704usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTApplication),
      "::",
      stringify!(applicationStringSize)
    )
  );
  assert_eq!(
    unsafe { ::std::ptr::addr_of!((*ptr).saveApplicationString) as usize - ptr as usize },
    2712usize,
    concat!(
      "Offset of field: ",
      stringify!(VkFFTApplication),
      "::",
      stringify!(saveApplicationString)
    )
  );
}
extern "C" {
  #[link_name = "\u{1}__Z11deleteVkFFTP16VkFFTApplication"]
  pub fn deleteVkFFT(app: *mut VkFFTApplication);
}
extern "C" {
  #[link_name = "\u{1}__Z9VkFFTSyncP16VkFFTApplication"]
  pub fn VkFFTSync(app: *mut VkFFTApplication) -> VkFFTResult;
}
extern "C" {
  #[link_name = "\u{1}__Z11VkFFTAppendP16VkFFTApplicationiP17VkFFTLaunchParams"]
  pub fn VkFFTAppend(
    app: *mut VkFFTApplication,
    inverse: ::std::os::raw::c_int,
    launchParams: *mut VkFFTLaunchParams,
  ) -> VkFFTResult;
}
extern "C" {
  #[link_name = "\u{1}__Z15initializeVkFFTP16VkFFTApplication18VkFFTConfiguration"]
  pub fn initializeVkFFT(
    app: *mut VkFFTApplication,
    inputLaunchConfiguration: VkFFTConfiguration,
  ) -> VkFFTResult;
}
extern "C" {
  #[link_name = "\u{1}__Z13VkFFTPlanAxisP16VkFFTApplicationP9VkFFTPlanyyyy"]
  pub fn VkFFTPlanAxis(
    app: *mut VkFFTApplication,
    FFTPlan: *mut VkFFTPlan,
    axis_id: u64,
    axis_upload_id: u64,
    inverse: u64,
    reverseBluesteinMultiUpload: u64,
  ) -> VkFFTResult;
}
extern "C" {
  #[link_name = "\u{1}__Z15VkFFTGetVersionv"]
  pub fn VkFFTGetVersion() -> ::std::os::raw::c_int;
}
